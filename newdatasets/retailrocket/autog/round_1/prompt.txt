
        Imagine you are an expert graph data scientist, and now you are expected to construct graph schema based on the original
        inputs. You will be given an original schema represented in the dictionary format:
        <data>
            1. dataset_name: name of the dataset 
            2. tables: meta data for list of tables, each one will present following attributes
                1. name: table name
                2. source: source of the data, can either be a numpy .npz file or a parquet file
                3. columns: list of columns, each column will have following attributes
                    1. name: column name
                    2. dtype: column type, can be either text, categorical, float, primary_key, foreign_key, or multi_category.
                    primary_key and foreign_key are two special types of categorical columns, which presents a structural
                    relationship with other tables. Multi_category means this column is of list type, and each cell main contains
                    a list of categorical values. After a column is set as primary_key or foreign_key, it should not be changed to other types.
                    3. link_to (optional): if this column is a foreign key, point to which primary key from which table
            3. statistics of the table: statistics of the column value of tables. These statistics can be used to help you
            determine the characteristics of the columns. For example, if one categorical column only contains one unique value,
            then creating a node type based on this column can result in a super node, which is not ideal for graph construction.
            You should also determine whether two columns represent the same thing based on these statistics. 
            4. Dummy table is a special type of table. It's not explicitly defined with a table slot. It's defined in other tables, such as
            {"name": "nation", "dtype": "foreign_key", "link_to": "Country.CountryID"}. In this case, "Country" is a dummy table, which is not 
            explicitly defined in the tables slot.
        </data>                
        Here are the documents of the actions:
        
        Here is the introduction of the function generate_or_connect_dummy_table:
Description:
This function can be used in two ways:
1. Generate a dummy table with only one primary key
2. Turn an existing column with categorical type to an existing dummy table
"orig_col_name" must be a column with category type
Parameters:
dbb: the database object
base_table_name: the name of the original table
orig_col_name: the name of the original column in the original table, this should be a column with category type
new_table_name: the name of the new table to be created/connected
new_col_name: the name of the new column to be created/connected

Here is the introduction of the function connect_two_columns:
Description:
Connect two columns, this function can be used for the following case. Always put the column with category type in table 1.
1. A category column in table 1 is connected to a category column in table 2, in this case, a new dummy table will be created
2. A category column in table 1 is connected to a primary key column in table 2, in this case, the column in table 1 will be turned into a foreign key column. In case 2, table_2_col_name must be a primary key column
3. A category column in table 1 is connected to a non-category and non-primary key column in table 2, in this case, we will use a trick called Surrogate Key. 
4. If the column in table 1 is already a foreign key, then in this case it's probably a multi-column-point-to-one case, we need to update other fk columns too.
Parameters:
dbb: the database object
table_1_name: the name of the first table, 
table_1_col_name: the name of the column in the first table, this should be a column with category type
table_2_name: the name of the second table
table_2_col_name: the name of the column in the second table, this should be a column with category type

Here is the introduction of the function explode_multi_category_column:
Description:
Explode a multi-category column into multiple columns. You should determine whether to use this function. If you don't explode a multi-category column, it will be treated as a single category column automatically.
Parameters:
dbb: the database object
original_table: name of the original table where the multi-category column is located
multi_cat_col: the name of the multi-category column
primary_key_column: the name of the primary key column in the original table
new_table_name: the name of the new table to be created
new_col_name: the name of the new column to be created
dtype: the data type of the new column, if set to "foreign_key", this table will contain only "foreign_keys". In this case, it means you only want to use this column's relaion. If set to other types, this table will contain the original column's values, and a primary key will be added, this means you want to use this column's values.

Here is the introduction of the function generate_non_dummy_table:
Description:
Generate a non-dummy table with columns in the original table
Parameters:
dbb: the database object
base_table_name: the name of the original table
cols: the list of columns to be included in the new table and removed from the original table
new_table_name: the name of the new table to be created

Here is the introduction of the function remove_primary_key:
Description:
Remove a primary key constraint from a column in the original table
If the column is just an index, then the column will be removed from the table.
For example, if the schema is like {
    {"name": "id", "dtype": "primary_key"},
    {"name": "user", "dtype": "foreign_key", "link_to": "user.userID"},
    {"name": "book", "dtype": "foreign_key", "link_to": "book.bookID"},
}
In such case, it's clear that this table represents the role of an edge, while the presence of primary key prevents heuristic to turn this table into an edge. Primary key is not needed in this case.
In such case, we will remove the primary key constraint from the column.
Parameters:
dbb: the database object
base_table_name: the name of the original table
col_name: the name of the column in the original table

Here is the introduction of the function add_primary_key:
Description:
Add a primary key column to the original table
Parameters:
dbb: the database object
base_table_name: the name of the original table
col_name: the name of the newly added primary key column

        
        Now, you need to 
        1. Actively think about whether any one of the four actions should be conducted; If not, you can select "None" and then halt the program.
        2. output all actions you can think of from the above list to perform, and output your selection in the following format. It should be noted that for those actions with sequential relation like one new categorical column generated after expanding a multi-category column, you don't need to generate in one round.
        
        <selection>
        [{'explanation': <explanation for the selection>, 'action': <first action>, 'parameters': <parameters for the first action> },
        {'explanation': <explanation for the selection>, 'action': <second action>, 'parameters': <parameters for the second action> }, ...
        ]
        </selection>

        
        3. If not more action, output <selection>None</selection>
        
        Example:
        
Table: Paper
{
  "Column": "PaperID",
  "data type": "primary_key"
}
{
    "Column": "Title",
    "data type": "text",
    "Number of unique values": 10000,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": "Transformers",
    "5 sampled values": [
        "Transformers",
        "Graph Neural Networks",
        "Reinforcement Learning",
        "Meta Learning",
        "Computer Vision"
    ]
}
{
    "Column": "Authors",
    "data type": "multi_category",
    "Number of unique values": 987,
    "Number of nan values": 0,
    "Number of total values": 74320,
    "Mode values": "Yann LeCun",
    "5 sampled values": [
        "Yann LeCun",
        "Geoffrey Hinton",
        "Yoshua Bengio",
        "Fei-Fei Li",
        "Jitendra Malik"
    ]
}
{
    "Column": "Journal",
    "data type": "category",
    "Number of unique values": 100,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": "Nature",
    "5 sampled values": [
        "Nature",
        "Science",
        "NeurIPS",
        "ICML",
        "CVPR"
    ]
}
{
    "Column": "Year",
    "data type": "float",
}
{
    "Column": "Keywords",
    "data type": "category",
    "Number of unique values": 100,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": "Machine Learning",
    "5 sampled values": [
        "Machine Learning",
        "Deep Learning",
        "Graph Neural Networks",
        "Reinforcement Learning",
        "Meta Learning"
    ]
}
{
    "Column": "Abstract",
    "data type": "text",
    "Number of unique values": 10000,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": "This paper presents a new model for graph neural networks.",
    "5 sampled values": [
        "This paper presents a new model for graph neural networks.",
        "This paper introduces a new reinforcement learning algorithm.",
        "This paper presents a new model for transformers.",
        "This paper presents a new model for meta learning.",
        "This paper presents a new model for computer vision."
    ]
}
{
    "Column": "Category",
    "data type": "category",
    "Number of unique values": 10,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": 3,
    "5 sampled values": [
        3,
        4,
        1,
        6,
        9
    ]
}
{
  "Column": "ItemID",
  "data type": "foreign_key"
}
Table: Journal
{
  "Column": "JournalID",
  "data type": "primary_key"
}
{
  "Column": "Name",
  "data type": "text", 
    "Number of unique values": 100,
    "Number of nan values": 0,
    "Number of total values": 100,
    "Mode values": "Nature",
    "5 sampled values": [
        "Nature",
        "Science",
        "NeurIPS",
        "ICML",
        "CVPR"
    ]
}
{
    "Column": "ImpactFactor",
    "data type": "float"
}
{
    "Column": "Country",
    "data type": "category",
    "Number of unique values": 10,
    "Number of nan values": 0,
    "Number of total values": 100,
    "Mode values": "USA",
    "5 sampled values": [
        "USA",
        "USA",
        "Canada",
        "UK",
        "USA"
    ]
}
{
    "Column": "Publisher",
    "data type": "text",
    "Number of unique values": 9,
    "Number of nan values": 0,
    "Number of total values": 100,
    "Mode values": "Springer",
    "5 sampled values": [
        "Springer",
        "Elsevier",
        "ACM",
        "IEEE",
        "Nature"
    ]
}
{
    "Column": "PublisherLocation",
    "data type": "category",
    "Number of unique values": 5,
    "Number of nan values": 0,
    "Number of total values": 100,
    "Mode values": "USA",
    "5 sampled values": [
        "USA",
        "USA",
        "Canada",
        "UK",
        "USA"
    ]
}

</dataset_stats>
<tasks>
Now I want to train a model which can predict the category of a paper based on the information in the paper.
</tasks>
<schema>
{
        "dataset_name": "Papers",
        "tables": [
            {
                "name": "Paper",
                "source": "data/paper.npz",
                "columns": [
                    {"name": "PaperID", "dtype": "primary_key"},
                    {"name": "Title", "dtype": "text"},
                    {"name": "Authors", "dtype": "multi_category"},
                    {"name": "Journal", "dtype": "category"},
                    {"name": "Year", "dtype": "float"},
                    {"name": "Keywords", "dtype": "category"},
                    {"name": "Abstract", "dtype": "text"},
                    {"name": "Category", "dtype": "category"}
                ]
            }, 
            {
                "name": "Journal",
                "source": "data/journal.npz",
                "columns": [
                    {"name": "JournalID", "dtype": "primary_key"},
                    {"name": "Name", "dtype": "text"},
                    {"name": "ImpactFactor", "dtype": "float"},
                    {"name": "Country", "dtype": "category"},
                    {"name": "Publisher", "dtype": "text"},
                    {"name": "PublisherLocation", "dtype": "category"}
                ]
            }
        ]
    }
</schema>
Here we gives the similarity score of each column pair, you can use this information to determine whether two columns may be joinable. The similarity score is scaled to [0, 1], the larger means the more similar.
<similarity>
The pair with the 1st highest similarity is column "Journal" from Table "Paper" and column "Name" from Table "Journal" with similarity 0.885
The pair with the 2nd highest similarity is column "Authors" from Table "Paper" and column "Name" from Table "Journal" with similarity 0.743
The pair with the 3rd highest similarity is column "Authors" from Table "Paper" and column "Country" from Table "Journal" with similarity 0.723
</similarity>
</input>



We need to think about whether we need to do one of the six actions:
1. First, for explode_multi_category_column, the Authors of the paper are in a multi-category column. Moreover, author is closely related to the category of the paper, so the relationship Paper-Author-Paper can be very useful. So, we need to explode this multi category column.
2. For connect_two_columns, the Journal column in the Paper table and the  column Name in the Journal table are highly similar, so we can connect these two columns with a foreign key constraint. Other pairs like Authors and Name, Authors and Country are not similar enough to be connected.
3. For generate_non_dummy_table, the Publisher and PublisherLocation columns are independent columns for the entity Publisher. We can generate a new table Publisher with these two columns.
4. For generate_or_connect_dummy_table, we need to find those categorical columns beneficial for downstream task. We have categorical columns (Journal has been deleted in step 2, Category is the final objective) Keyword, Country, this will result in relationship Paper-Keyword-Paper and Paper-Journal-Country-Journal-Paper respectively. Since the target is to predict the category of a paper, we can generate a dummy table for the column Keyword since paper sharing the same keyword are highly likely to share the same category. Country may be not beneficial since it doesn't present a strong semantic relationship with the category. 
5. For remove_primary_key and add_primary_key, there's no unreasonable primary key or missing primary key in the table, so we don't need to do this action. as a result, we have the following actions
<selection>
        [{{'explanation': "Author is multi-category and Paper-Author-Paper is probably useful. We set the dtype to foreign_key because we want to use the relation", 'action': 'explode_multi_category_column', 'parameters': {'original_table': 'Paper', 'multi_cat_col': 'Author', primary_key_column: 'PaperID', 'new_table_name': 'Author', 'new_col_name': 'AuthorName', 'dtype': 'foreign_key'}},
        {{'explanation': 'the Journal column in the Paper table and the  column Name in the Journal table are highly similar, both of them should refer to the name of the journal', 'action': 'connect_two_columns', 'parameters': {'table_1_name': 'Paper', 'table_1_col_name': 'Journal', 'table_2_name': 'Journal', 'table_2_col_name': 'Name', 'new_table_name': "", 'new_table_col_name': "" }}, 
        {{'explanation': 'Publisher and PublisherLocation are independent columns for the entity Publisher. We can generate a new table Publisher with these two columns', 'action': 'generate_non_dummy_table', 'parameters': {'base_table_name': 'Paper', 'cols': ['Publisher', 'PublisherLocation'],  'new_table_name': 'Publisher'}},
        {{'explanation': 'Keyword is a categorical column which can be used to generate a dummy table. Country is not beneficial for the downstream task', 'action': 'generate_or_connect_dummy_table', 'parameters': {'base_table_name': 'Paper', 'orig_col_name': 'Keyword', 'new_table_name': 'Keyword', 'new_col_name': 'Keyword'}},
        ]
        </selection>

    

        
        History Actions:
        First iteration, no history yet


        
        <input>
        <dataset_stats>
        Analysis for Table View:
  Column: timestamp
    Max: 2015-09-18T02:59:47.788000000
    Min: 2015-05-03T03:00:04.384000000
    Mode: 2015-07-16 19:41:03.246000
    Sampled Values: ['2015-05-19T08:35:52.881000000' '2015-09-01T14:23:46.752000000'
 '2015-09-08T02:02:22.780000000' '2015-07-25T16:40:19.447000000'
 '2015-08-02T05:18:12.899000000']
    Number of Total Values: 2733644
    Number of Unique Values: 2730152
  Column: visitorid
    Max: 1407579
    Min: 0
    Mode: 1150086
    Sampled Values: [1193843   25352   76015 1241638   79463]
    Number of Total Values: 2733644
    Number of Unique Values: 1407500
  Column: itemid
    Max: 466867
    Min: 3
    Mode: 187946
    Sampled Values: [ 20642 359778 114855  53852  67322]
    Number of Total Values: 2733644
    Number of Unique Values: 235060
  Column: added_to_cart
    Max: 1
    Min: 0
    Mode: 0
    Sampled Values: [0 0 0 0 0]
    Number of Total Values: 2733644
    Number of Unique Values: 2

Analysis for Table Category:
  Column: categoryid
    Mode: 0
    Sampled Values: [1160 360 324 190 269]
    Number of Total Values: 1669
    Number of Unique Values: 1669
  Column: parentid
    Mode: 250
    Sampled Values: [1499 653 1239 131 20]
    Number of Total Values: 1669
    Number of Unique Values: 362

Analysis for Table ItemAvailability:
  Column: timestamp
    Max: 2015-09-13T03:00:00.000000000
    Min: 2015-05-10T03:00:00.000000000
    Mode: 2015-05-10 03:00:00
    Sampled Values: ['2015-08-30T03:00:00.000000000' '2015-08-02T03:00:00.000000000'
 '2015-05-31T03:00:00.000000000' '2015-05-17T03:00:00.000000000'
 '2015-05-17T03:00:00.000000000']
    Number of Total Values: 1503639
    Number of Unique Values: 18
  Column: item_available_itemid
    Max: 466866
    Min: 0
    Mode: 1
    Sampled Values: [262037 274235 343516 381524 215029]
    Number of Total Values: 1503639
    Number of Unique Values: 417053
  Column: available
    Mode: 0
    Sampled Values: ['0...', '1...', '1...', '0...', '0...']
    Number of Total Values: 1503639
    Number of Unique Values: 2

Analysis for Table ItemCategory:
  Column: timestamp
    Max: 2015-09-13T03:00:00.000000000
    Min: 2015-05-10T03:00:00.000000000
    Mode: 2015-05-10 03:00:00
    Sampled Values: ['2015-06-07T03:00:00.000000000' '2015-05-10T03:00:00.000000000'
 '2015-05-10T03:00:00.000000000' '2015-06-28T03:00:00.000000000'
 '2015-05-10T03:00:00.000000000']
    Number of Total Values: 788214
    Number of Unique Values: 18
  Column: itemid
    Max: 466866
    Min: 0
    Mode: 25
    Sampled Values: [179678  13824  46348  77966 197032]
    Number of Total Values: 788214
    Number of Unique Values: 417053
  Column: category
    Mode: 1147
    Sampled Values: [1408 1503 858 491 70]
    Number of Total Values: 788214
    Number of Unique Values: 1242

Analysis for Table ItemProperty:
  Column: timestamp
    Max: 2015-09-13T03:00:00.000000000
    Min: 2015-05-10T03:00:00.000000000
    Mode: 2015-05-10 03:00:00
    Sampled Values: ['2015-05-24T03:00:00.000000000' '2015-05-10T03:00:00.000000000'
 '2015-06-28T03:00:00.000000000' '2015-05-10T03:00:00.000000000'
 '2015-07-26T03:00:00.000000000']
    Number of Total Values: 17984049
    Number of Unique Values: 18
  Column: item_property_itemid
    Max: 466866
    Min: 0
    Mode: 254069
    Sampled Values: [109237 174710  18991 268956  11986]
    Number of Total Values: 17984049
    Number of Unique Values: 417053
  Column: property
    Mode: 888
    Sampled Values: ['888...', '451...', '678...', '364...', '678...']
    Number of Total Values: 17984049
    Number of Unique Values: 1102
  Column: value
    Mode: 769062
    Sampled Values: ['n14400.000...', '824166 741369...', '460346 563968 1204938 180470 249995 1204938 366600...', 'n7920.000...', '1079113...']
    Number of Total Values: 17984049
    Number of Unique Values: 1966574


        </dataset_stats>
        <task>
        The task is to classify whether an item will be added to the shopping cart by a visitor, i.e. predicting column View.added_to_cart
        </task>
        <schema>
        {"dataset_name":"retailrocket","tables":[{"name":"View","source":"data/all_views.pqt","format":"parquet","columns":[{"name":"timestamp","dtype":"datetime","description":"This column represents the timestamp of events, with unique values for each event."},{"name":"visitorid","dtype":"category","description":"This column likely represents unique visitor IDs, as it has a large number of unique values."},{"name":"itemid","dtype":"category","description":"This column represents unique item IDs, as it has many unique values."},{"name":"added_to_cart","dtype":"category","description":"This column represents whether an item was added to the cart, with binary values (0 or 1)."}],"time_column":null},{"name":"Category","source":"data/category_tree.pqt","format":"parquet","columns":[{"name":"categoryid","dtype":"primary_key","description":"This column represents unique category IDs, as each value is distinct."},{"name":"parentid","dtype":"category","description":"This column represents parent category IDs, as there are fewer unique values than the category ID column, indicating a hierarchical relationship."}],"time_column":null},{"name":"ItemAvailability","source":"data/item_availability.pqt","format":"parquet","columns":[{"name":"timestamp","dtype":"datetime","description":"This column represents timestamps for item availability events, with only a few unique values."},{"name":"item_available_itemid","dtype":"category","description":"This column represents item IDs that are available, with many unique values."},{"name":"available","dtype":"category","description":"This column represents whether an item is available, with binary values (0 or 1)."}],"time_column":null},{"name":"ItemCategory","source":"data/item_categories.pqt","format":"parquet","columns":[{"name":"timestamp","dtype":"datetime","description":"This column represents timestamps for item-category associations, with a limited number of unique values."},{"name":"itemid","dtype":"category","description":"This column represents unique item IDs, as it has many unique values."},{"name":"category","dtype":"category","description":"This column represents category IDs associated with items, with a significant number of unique values."}],"time_column":null},{"name":"ItemProperty","source":"data/item_properties.pqt","format":"parquet","columns":[{"name":"timestamp","dtype":"datetime","description":"This column represents timestamps for item property updates, with a small number of unique values."},{"name":"item_property_itemid","dtype":"category","description":"This column represents item IDs linked to specific properties, with many unique values."},{"name":"property","dtype":"category","description":"This column represents property IDs assigned to items, with a limited number of unique values."},{"name":"value","dtype":"multi_category","description":"This column is a multi-category field representing property values, as it contains a list of values that could be exploded into a large number of unique elements."}],"time_column":null}],"tasks":[{"name":"cvr","source":"cvr/{split}.pqt","format":"parquet","columns":[{"name":"itemid","dtype":"category"},{"name":"visitorid","dtype":"category"},{"name":"added_to_cart","dtype":"category"},{"name":"timestamp","dtype":"datetime"}],"time_column":null,"evaluation_metric":"auroc","target_column":"added_to_cart","target_table":"View","task_type":"classification","key_prediction_label_column":"label","key_prediction_query_idx_column":"query_idx"}],"method":"r2n","column_groups":null}
        </schema>
        Here we gives the similarity score of each column pair, you can use this information to determine whether two columns may be joinable. The similarity score is scaled to [0, 1], the larger means the more similar.
        <similarity>
        The pair with the 1st highest similarity is column "itemid" from Table "View" and column "itemid" from Table "ItemCategory" with similarity 0.955
The pair with the 2nd highest similarity is column "itemid" from Table "ItemCategory" and column "item_property_itemid" from Table "ItemProperty" with similarity 0.893
The pair with the 3rd highest similarity is column "itemid" from Table "View" and column "item_property_itemid" from Table "ItemProperty" with similarity 0.865
The pair with the 4th highest similarity is column "item_available_itemid" from Table "ItemAvailability" and column "item_property_itemid" from Table "ItemProperty" with similarity 0.840
The pair with the 5th highest similarity is column "item_available_itemid" from Table "ItemAvailability" and column "itemid" from Table "ItemCategory" with similarity 0.810
The pair with the 6th highest similarity is column "itemid" from Table "View" and column "item_available_itemid" from Table "ItemAvailability" with similarity 0.782
The pair with the 7th highest similarity is column "visitorid" from Table "View" and column "itemid" from Table "View" with similarity 0.563
The pair with the 8th highest similarity is column "visitorid" from Table "View" and column "itemid" from Table "ItemCategory" with similarity 0.555
The pair with the 9th highest similarity is column "visitorid" from Table "View" and column "item_property_itemid" from Table "ItemProperty" with similarity 0.498
The pair with the 10th highest similarity is column "visitorid" from Table "View" and column "item_available_itemid" from Table "ItemAvailability" with similarity 0.429
The pair with the 11st highest similarity is column "added_to_cart" from Table "View" and column "item_property_itemid" from Table "ItemProperty" with similarity 0.184
The pair with the 12nd highest similarity is column "added_to_cart" from Table "View" and column "item_available_itemid" from Table "ItemAvailability" with similarity 0.177
The pair with the 13rd highest similarity is column "added_to_cart" from Table "View" and column "itemid" from Table "ItemCategory" with similarity 0.160
The pair with the 14th highest similarity is column "itemid" from Table "View" and column "added_to_cart" from Table "View" with similarity 0.143
The pair with the 15th highest similarity is column "visitorid" from Table "View" and column "added_to_cart" from Table "View" with similarity 0.010

        </similarity>
        </input>
        Return your output in the json format inside <selection></selection>.
    