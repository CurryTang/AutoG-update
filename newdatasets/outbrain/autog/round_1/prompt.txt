
        Imagine you are an expert graph data scientist, and now you are expected to construct graph schema based on the original
        inputs. You will be given an original schema represented in the dictionary format:
        <data>
            1. dataset_name: name of the dataset 
            2. tables: meta data for list of tables, each one will present following attributes
                1. name: table name
                2. source: source of the data, can either be a numpy .npz file or a parquet file
                3. columns: list of columns, each column will have following attributes
                    1. name: column name
                    2. dtype: column type, can be either text, categorical, float, primary_key, foreign_key, or multi_category.
                    primary_key and foreign_key are two special types of categorical columns, which presents a structural
                    relationship with other tables. Multi_category means this column is of list type, and each cell main contains
                    a list of categorical values. After a column is set as primary_key or foreign_key, it should not be changed to other types.
                    3. link_to (optional): if this column is a foreign key, point to which primary key from which table
            3. statistics of the table: statistics of the column value of tables. These statistics can be used to help you
            determine the characteristics of the columns. For example, if one categorical column only contains one unique value,
            then creating a node type based on this column can result in a super node, which is not ideal for graph construction.
            You should also determine whether two columns represent the same thing based on these statistics. 
            4. Dummy table is a special type of table. It's not explicitly defined with a table slot. It's defined in other tables, such as
            {"name": "nation", "dtype": "foreign_key", "link_to": "Country.CountryID"}. In this case, "Country" is a dummy table, which is not 
            explicitly defined in the tables slot.
        </data>                
        Here are the documents of the actions:
        
        Here is the introduction of the function generate_or_connect_dummy_table:
Description:
This function can be used in two ways:
1. Generate a dummy table with only one primary key
2. Turn an existing column with categorical type to an existing dummy table
"orig_col_name" must be a column with category type
Parameters:
dbb: the database object
base_table_name: the name of the original table
orig_col_name: the name of the original column in the original table, this should be a column with category type
new_table_name: the name of the new table to be created/connected
new_col_name: the name of the new column to be created/connected

Here is the introduction of the function connect_two_columns:
Description:
Connect two columns, this function can be used for the following case. Always put the column with category type in table 1.
1. A category column in table 1 is connected to a category column in table 2, in this case, a new dummy table will be created
2. A category column in table 1 is connected to a primary key column in table 2, in this case, the column in table 1 will be turned into a foreign key column. In case 2, table_2_col_name must be a primary key column
3. A category column in table 1 is connected to a non-category and non-primary key column in table 2, in this case, we will use a trick called Surrogate Key. 
4. If the column in table 1 is already a foreign key, then in this case it's probably a multi-column-point-to-one case, we need to update other fk columns too.
Parameters:
dbb: the database object
table_1_name: the name of the first table, 
table_1_col_name: the name of the column in the first table, this should be a column with category type
table_2_name: the name of the second table
table_2_col_name: the name of the column in the second table, this should be a column with category type

Here is the introduction of the function explode_multi_category_column:
Description:
Explode a multi-category column into multiple columns. You should determine whether to use this function. If you don't explode a multi-category column, it will be treated as a single category column automatically.
Parameters:
dbb: the database object
original_table: name of the original table where the multi-category column is located
multi_cat_col: the name of the multi-category column
primary_key_column: the name of the primary key column in the original table
new_table_name: the name of the new table to be created
new_col_name: the name of the new column to be created
dtype: the data type of the new column, if set to "foreign_key", this table will contain only "foreign_keys". In this case, it means you only want to use this column's relaion. If set to other types, this table will contain the original column's values, and a primary key will be added, this means you want to use this column's values.

Here is the introduction of the function generate_non_dummy_table:
Description:
Generate a non-dummy table with columns in the original table
Parameters:
dbb: the database object
base_table_name: the name of the original table
cols: the list of columns to be included in the new table and removed from the original table
new_table_name: the name of the new table to be created

Here is the introduction of the function remove_primary_key:
Description:
Remove a primary key constraint from a column in the original table
If the column is just an index, then the column will be removed from the table.
For example, if the schema is like {
    {"name": "id", "dtype": "primary_key"},
    {"name": "user", "dtype": "foreign_key", "link_to": "user.userID"},
    {"name": "book", "dtype": "foreign_key", "link_to": "book.bookID"},
}
In such case, it's clear that this table represents the role of an edge, while the presence of primary key prevents heuristic to turn this table into an edge. Primary key is not needed in this case.
In such case, we will remove the primary key constraint from the column.
Parameters:
dbb: the database object
base_table_name: the name of the original table
col_name: the name of the column in the original table

Here is the introduction of the function add_primary_key:
Description:
Add a primary key column to the original table
Parameters:
dbb: the database object
base_table_name: the name of the original table
col_name: the name of the newly added primary key column

        
        Now, you need to 
        1. Actively think about whether any one of the four actions should be conducted; If not, you can select "None" and then halt the program.
        2. output all actions you can think of from the above list to perform, and output your selection in the following format. It should be noted that for those actions with sequential relation like one new categorical column generated after expanding a multi-category column, you don't need to generate in one round.
        
        <selection>
        [{'explanation': <explanation for the selection>, 'action': <first action>, 'parameters': <parameters for the first action> },
        {'explanation': <explanation for the selection>, 'action': <second action>, 'parameters': <parameters for the second action> }, ...
        ]
        </selection>

        
        3. If not more action, output <selection>None</selection>
        
        Example:
        
Table: Paper
{
  "Column": "PaperID",
  "data type": "primary_key"
}
{
    "Column": "Title",
    "data type": "text",
    "Number of unique values": 10000,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": "Transformers",
    "5 sampled values": [
        "Transformers",
        "Graph Neural Networks",
        "Reinforcement Learning",
        "Meta Learning",
        "Computer Vision"
    ]
}
{
    "Column": "Authors",
    "data type": "multi_category",
    "Number of unique values": 987,
    "Number of nan values": 0,
    "Number of total values": 74320,
    "Mode values": "Yann LeCun",
    "5 sampled values": [
        "Yann LeCun",
        "Geoffrey Hinton",
        "Yoshua Bengio",
        "Fei-Fei Li",
        "Jitendra Malik"
    ]
}
{
    "Column": "Journal",
    "data type": "category",
    "Number of unique values": 100,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": "Nature",
    "5 sampled values": [
        "Nature",
        "Science",
        "NeurIPS",
        "ICML",
        "CVPR"
    ]
}
{
    "Column": "Year",
    "data type": "float",
}
{
    "Column": "Keywords",
    "data type": "category",
    "Number of unique values": 100,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": "Machine Learning",
    "5 sampled values": [
        "Machine Learning",
        "Deep Learning",
        "Graph Neural Networks",
        "Reinforcement Learning",
        "Meta Learning"
    ]
}
{
    "Column": "Abstract",
    "data type": "text",
    "Number of unique values": 10000,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": "This paper presents a new model for graph neural networks.",
    "5 sampled values": [
        "This paper presents a new model for graph neural networks.",
        "This paper introduces a new reinforcement learning algorithm.",
        "This paper presents a new model for transformers.",
        "This paper presents a new model for meta learning.",
        "This paper presents a new model for computer vision."
    ]
}
{
    "Column": "Category",
    "data type": "category",
    "Number of unique values": 10,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": 3,
    "5 sampled values": [
        3,
        4,
        1,
        6,
        9
    ]
}
{
  "Column": "ItemID",
  "data type": "foreign_key"
}
Table: Journal
{
  "Column": "JournalID",
  "data type": "primary_key"
}
{
  "Column": "Name",
  "data type": "text", 
    "Number of unique values": 100,
    "Number of nan values": 0,
    "Number of total values": 100,
    "Mode values": "Nature",
    "5 sampled values": [
        "Nature",
        "Science",
        "NeurIPS",
        "ICML",
        "CVPR"
    ]
}
{
    "Column": "ImpactFactor",
    "data type": "float"
}
{
    "Column": "Country",
    "data type": "category",
    "Number of unique values": 10,
    "Number of nan values": 0,
    "Number of total values": 100,
    "Mode values": "USA",
    "5 sampled values": [
        "USA",
        "USA",
        "Canada",
        "UK",
        "USA"
    ]
}
{
    "Column": "Publisher",
    "data type": "text",
    "Number of unique values": 9,
    "Number of nan values": 0,
    "Number of total values": 100,
    "Mode values": "Springer",
    "5 sampled values": [
        "Springer",
        "Elsevier",
        "ACM",
        "IEEE",
        "Nature"
    ]
}
{
    "Column": "PublisherLocation",
    "data type": "category",
    "Number of unique values": 5,
    "Number of nan values": 0,
    "Number of total values": 100,
    "Mode values": "USA",
    "5 sampled values": [
        "USA",
        "USA",
        "Canada",
        "UK",
        "USA"
    ]
}

</dataset_stats>
<tasks>
Now I want to train a model which can predict the category of a paper based on the information in the paper.
</tasks>
<schema>
{
        "dataset_name": "Papers",
        "tables": [
            {
                "name": "Paper",
                "source": "data/paper.npz",
                "columns": [
                    {"name": "PaperID", "dtype": "primary_key"},
                    {"name": "Title", "dtype": "text"},
                    {"name": "Authors", "dtype": "multi_category"},
                    {"name": "Journal", "dtype": "category"},
                    {"name": "Year", "dtype": "float"},
                    {"name": "Keywords", "dtype": "category"},
                    {"name": "Abstract", "dtype": "text"},
                    {"name": "Category", "dtype": "category"}
                ]
            }, 
            {
                "name": "Journal",
                "source": "data/journal.npz",
                "columns": [
                    {"name": "JournalID", "dtype": "primary_key"},
                    {"name": "Name", "dtype": "text"},
                    {"name": "ImpactFactor", "dtype": "float"},
                    {"name": "Country", "dtype": "category"},
                    {"name": "Publisher", "dtype": "text"},
                    {"name": "PublisherLocation", "dtype": "category"}
                ]
            }
        ]
    }
</schema>
Here we gives the similarity score of each column pair, you can use this information to determine whether two columns may be joinable. The similarity score is scaled to [0, 1], the larger means the more similar.
<similarity>
The pair with the 1st highest similarity is column "Journal" from Table "Paper" and column "Name" from Table "Journal" with similarity 0.885
The pair with the 2nd highest similarity is column "Authors" from Table "Paper" and column "Name" from Table "Journal" with similarity 0.743
The pair with the 3rd highest similarity is column "Authors" from Table "Paper" and column "Country" from Table "Journal" with similarity 0.723
</similarity>
</input>



We need to think about whether we need to do one of the six actions:
1. First, for explode_multi_category_column, the Authors of the paper are in a multi-category column. Moreover, author is closely related to the category of the paper, so the relationship Paper-Author-Paper can be very useful. So, we need to explode this multi category column.
2. For connect_two_columns, the Journal column in the Paper table and the  column Name in the Journal table are highly similar, so we can connect these two columns with a foreign key constraint. Other pairs like Authors and Name, Authors and Country are not similar enough to be connected.
3. For generate_non_dummy_table, the Publisher and PublisherLocation columns are independent columns for the entity Publisher. We can generate a new table Publisher with these two columns.
4. For generate_or_connect_dummy_table, we need to find those categorical columns beneficial for downstream task. We have categorical columns (Journal has been deleted in step 2, Category is the final objective) Keyword, Country, this will result in relationship Paper-Keyword-Paper and Paper-Journal-Country-Journal-Paper respectively. Since the target is to predict the category of a paper, we can generate a dummy table for the column Keyword since paper sharing the same keyword are highly likely to share the same category. Country may be not beneficial since it doesn't present a strong semantic relationship with the category. 
5. For remove_primary_key and add_primary_key, there's no unreasonable primary key or missing primary key in the table, so we don't need to do this action. as a result, we have the following actions
<selection>
        [{{'explanation': "Author is multi-category and Paper-Author-Paper is probably useful. We set the dtype to foreign_key because we want to use the relation", 'action': 'explode_multi_category_column', 'parameters': {'original_table': 'Paper', 'multi_cat_col': 'Author', primary_key_column: 'PaperID', 'new_table_name': 'Author', 'new_col_name': 'AuthorName', 'dtype': 'foreign_key'}},
        {{'explanation': 'the Journal column in the Paper table and the  column Name in the Journal table are highly similar, both of them should refer to the name of the journal', 'action': 'connect_two_columns', 'parameters': {'table_1_name': 'Paper', 'table_1_col_name': 'Journal', 'table_2_name': 'Journal', 'table_2_col_name': 'Name', 'new_table_name': "", 'new_table_col_name': "" }}, 
        {{'explanation': 'Publisher and PublisherLocation are independent columns for the entity Publisher. We can generate a new table Publisher with these two columns', 'action': 'generate_non_dummy_table', 'parameters': {'base_table_name': 'Paper', 'cols': ['Publisher', 'PublisherLocation'],  'new_table_name': 'Publisher'}},
        {{'explanation': 'Keyword is a categorical column which can be used to generate a dummy table. Country is not beneficial for the downstream task', 'action': 'generate_or_connect_dummy_table', 'parameters': {'base_table_name': 'Paper', 'orig_col_name': 'Keyword', 'new_table_name': 'Keyword', 'new_col_name': 'Keyword'}},
        ]
        </selection>

    

        
        History Actions:
        First iteration, no history yet


        
        <input>
        <dataset_stats>
        Analysis for Table Event:
  Column: display_id
    Max: 23119991
    Min: 32
    Mode: 32
    Sampled Values: [19606220 11098349 13960561 11654849 10721681]
    Number of Total Values: 23121
    Number of Unique Values: 23121
  Column: event_uuid
    Mode: 4a28d44e97dafc
    Sampled Values: ['b38b87babbafc1...', 'e88c7f9d8502d1...', '7f95c49178dc45...', '70983653cf213a...', '94e932ccbbcd6b...']
    Number of Total Values: 23121
    Number of Unique Values: 22771
  Column: document_id
    Max: 2997967
    Min: 234
    Mode: 18168
    Sampled Values: [2608251  159931 2020901 2795811 2795811]
    Number of Total Values: 23121
    Number of Unique Values: 5651
  Column: timestamp
    Max: 2016-06-29T03:59:51.853000000
    Min: 2016-06-14T04:00:02.595000000
    Mode: 2016-06-14 04:00:02.595000
    Sampled Values: ['2016-06-15T17:05:27.825000000' '2016-06-27T14:02:28.053000000'
 '2016-06-14T10:29:09.318000000' '2016-06-27T01:53:35.366000000'
 '2016-06-23T06:39:42.111000000']
    Number of Total Values: 23121
    Number of Unique Values: 23121
  Column: platform
    Mode: 2
    Sampled Values: ['1...', '1...', '3...', '2...', '2...']
    Number of Total Values: 23121
    Number of Unique Values: 3
  Column: geo_location
    Mode: US>CA>803
    Sampled Values: ['US>NJ>501...', 'US>NJ>504...', 'US>CA>866...', 'US>WI>705...', 'GB>T1...']
    Number of Total Values: 23121
    Number of Unique Values: 973

Analysis for Table Pageview:
  Column: uuid
    Mode: f853f328fcead9
    Sampled Values: ['978d1c48ec77a3...', 'e422f2a037e629...', '9fcaf428a49474...', 'b601114e09e711...', '8018dfe560e3fa...']
    Number of Total Values: 2034276
    Number of Unique Values: 2020551
  Column: pv_document_id
    Max: 2999326
    Min: 2
    Mode: 1179111
    Sampled Values: [2040812 2896559  314170  768060 1717239]
    Number of Total Values: 2034276
    Number of Unique Values: 436049
  Column: timestamp
    Max: 2016-06-29T03:59:59.610000000
    Min: 2016-06-14T04:00:00.396000000
    Mode: 2016-06-15 17:18:38.342000
    Sampled Values: ['2016-06-14T05:42:10.607000000' '2016-06-20T16:19:25.678000000'
 '2016-06-20T18:18:09.471000000' '2016-06-19T04:50:57.992000000'
 '2016-06-19T00:43:47.170000000']
    Number of Total Values: 2034276
    Number of Unique Values: 2032403
  Column: platform
    Mode: 2
    Sampled Values: ['2...', '2...', '2...', '2...', '3...']
    Number of Total Values: 2034276
    Number of Unique Values: 3
  Column: geo_location
    Mode: US>CA>803
    Sampled Values: ['US>PA>504...', 'US>DC>511...', 'US>CT>533...', 'US>FL>539...', 'US>CA>803...']
    Number of Total Values: 2034276
    Number of Unique Values: 2612
  Column: traffic_source
    Max: 3
    Min: 1
    Mode: 1
    Sampled Values: [2 2 1 1 3]
    Number of Total Values: 2034276
    Number of Unique Values: 3

Analysis for Table Click:
  Column: cl_display_id
    Max: 16874135
    Min: 54
    Mode: 3944732
    Sampled Values: [14579461  5074589 12101993 14467657  2335365]
    Number of Total Values: 87142
    Number of Unique Values: 86929
  Column: cl_ad_id
    Max: 547030
    Min: 7
    Mode: 123742
    Sampled Values: [128496 356305 267532 154145  75464]
    Number of Total Values: 87142
    Number of Unique Values: 23391
  Column: clicked
    Max: 1
    Min: 0
    Mode: 0
    Sampled Values: [0 1 0 0 0]
    Number of Total Values: 87142
    Number of Unique Values: 2
  Column: timestamp
    Max: 2016-06-27T03:59:28.067000000
    Min: 2016-06-14T04:00:03.786000000
    Mode: 2016-06-17 01:45:58.552000
    Sampled Values: ['2016-06-23T11:39:18.520000000' '2016-06-22T06:55:32.410000000'
 '2016-06-25T15:04:11.912000000' '2016-06-15T14:50:24.332000000'
 '2016-06-16T00:37:56.447000000']
    Number of Total Values: 87142
    Number of Unique Values: 86926

Analysis for Table PromotedContent:
  Column: ad_id
    Max: 565599
    Min: 128
    Mode: 128
    Sampled Values: [430558 244549 343300 539487 352179]
    Number of Total Values: 560
    Number of Unique Values: 560
  Column: pc_document_id
    Max: 2970591
    Min: 18324
    Mode: 1383240
    Sampled Values: [ 469489  745141 1100702 1064196 1341438]
    Number of Total Values: 560
    Number of Unique Values: 406
  Column: campaign_id
    Max: 34772
    Min: 2
    Mode: 5455
    Sampled Values: [30720 22155  9414  5991 29640]
    Number of Total Values: 560
    Number of Unique Values: 378
  Column: advertiser_id
    Max: 4316
    Min: 7
    Mode: 283
    Sampled Values: [2030   53 1017 2656  569]
    Number of Total Values: 560
    Number of Unique Values: 226

Analysis for Table DocumentsMeta:
  Column: document_id
    Max: 2998180
    Min: 275
    Mode: 275
    Sampled Values: [2053297  956473 1271509 2765203  113248]
    Number of Total Values: 3000
    Number of Unique Values: 3000
  Column: source_id
    Mode: 722
    Sampled Values: ['798...', '105...', '6240...', '13602...', '3308...']
    Number of Total Values: 3000
    Number of Unique Values: 1251
  Column: publisher_id
    Mode: 925
    Sampled Values: ['118...', '151...', '265...', '328...', '255...']
    Number of Total Values: 3000
    Number of Unique Values: 406
  Column: publish_time
    Max: NaT
    Min: NaT
    Mode: 2016-06-15 00:00:00
    Sampled Values: [                          'NaT' '2016-05-27T19:00:00.000000000'
                           'NaT' '2016-06-13T17:00:00.000000000'
                           'NaT']
    Number of Total Values: 3000
    Number of Unique Values: 1280

Analysis for Table DocumentsTopic:
  Column: dt_document_id
    Max: 2996812
    Min: 30
    Mode: 13213
    Sampled Values: [ 333897   63116 2163760  983623  557332]
    Number of Total Values: 11326
    Number of Unique Values: 11284
  Column: topic_id
    Max: 299
    Min: 0
    Mode: 16
    Sampled Values: [ 16 184 184 184  20]
    Number of Total Values: 11326
    Number of Unique Values: 294
  Column: confidence_level
    Max: 0.819677406183055
    Min: 0.0080009921392339
    Mode: 0.0103648829626402
    Sampled Values: [0.03688753 0.01137998 0.03080894 0.15028685 0.02105357]
    Number of Total Values: 11326
    Number of Unique Values: 10991

Analysis for Table DocumentsCategory:
  Column: dc_document_id
    Max: 2999071
    Min: 271
    Mode: 813962
    Sampled Values: [  59760  807453 2263402 1261610  808012]
    Number of Total Values: 5482
    Number of Unique Values: 5478
  Column: category_id
    Max: 2100
    Min: 1000
    Mode: 1403
    Sampled Values: [1404 1408 1513 1407 1914]
    Number of Total Values: 5482
    Number of Unique Values: 88
  Column: confidence_level
    Max: 1.0
    Min: 0.002
    Mode: 0.07
    Sampled Values: [0.6360316  0.85608171 1.         0.78333538 0.03472834]
    Number of Total Values: 5482
    Number of Unique Values: 2265

Analysis for Table DocumentsEntity:
  Column: de_document_id
    Max: 2999070
    Min: 149
    Mode: 6932
    Sampled Values: [ 488425  486844 2656413 1165268  419418]
    Number of Total Values: 5538
    Number of Unique Values: 5528
  Column: entity_id
    Mode: e3e4b172a6e3fe3a428fb8d0f18cc611
    Sampled Values: ['9e62dea8b7000800d2b7431184d2d697...', '9a7023be3cf494e8179aa7704de75f5d...', 'a5c1aaa41c74b12ea1e1eab54a240882...', 'be6922347c443ab29fb8ff18cead415a...', '32e66e79cf48dc6b951630e7d709d942...']
    Number of Total Values: 5538
    Number of Unique Values: 4392
  Column: confidence_level
    Max: 0.996909430017699
    Min: 0.0012090963535498
    Mode: 0.752378317745229
    Sampled Values: [0.30895873 0.38206479 0.42447228 0.64138838 0.32936244]
    Number of Total Values: 5538
    Number of Unique Values: 5156


        </dataset_stats>
        <task>
        The task is to predict whether a promoted content will be clicked or not, i.e. predicting Click.clicked.
        </task>
        <schema>
        {"dataset_name":"outbrain-small","tables":[{"name":"Event","source":"data/events.pqt","format":"parquet","columns":[{"name":"display_id","dtype":"primary_key","description":"This column likely represents an identifier for different display events."},{"name":"event_uuid","dtype":"category","description":"This column appears to contain unique identifiers for each event, possibly UUIDs."},{"name":"document_id","dtype":"category","description":"This column likely represents unique document identifiers."},{"name":"timestamp","dtype":"datetime","description":"This column represents timestamps indicating when each event occurred."},{"name":"platform","dtype":"category","description":"This column represents different platform categories, likely an enumerated type."},{"name":"geo_location","dtype":"category","description":"This column likely represents geographical locations using a structured format."}],"time_column":null},{"name":"Pageview","source":"data/page_views.pqt","format":"parquet","columns":[{"name":"uuid","dtype":"category","description":"This column likely contains unique identifiers for users or sessions."},{"name":"pv_document_id","dtype":"category","description":"This column likely represents identifiers for viewed documents."},{"name":"timestamp","dtype":"datetime","description":"This column represents timestamps indicating when each pageview occurred."},{"name":"platform","dtype":"category","description":"This column represents different platform categories, likely an enumerated type."},{"name":"geo_location","dtype":"category","description":"This column likely represents geographical locations using a structured format."},{"name":"traffic_source","dtype":"category","description":"This column represents different sources of traffic, likely an enumerated type."}],"time_column":null},{"name":"Click","source":"data/clicks.pqt","format":"parquet","columns":[{"name":"cl_display_id","dtype":"category","description":"This column likely represents identifiers for displayed ads."},{"name":"cl_ad_id","dtype":"category","description":"This column likely represents identifiers for ads."},{"name":"clicked","dtype":"category","description":"This column represents a binary indicator of whether an ad was clicked or not."},{"name":"timestamp","dtype":"datetime","description":"This column represents timestamps indicating when each click event occurred."}],"time_column":null},{"name":"PromotedContent","source":"data/promoted_content.pqt","format":"parquet","columns":[{"name":"ad_id","dtype":"primary_key","description":"This column represents unique identifiers for ads."},{"name":"pc_document_id","dtype":"category","description":"This column represents identifiers for documents linked to promoted content."},{"name":"campaign_id","dtype":"category","description":"This column represents identifiers for different advertising campaigns."},{"name":"advertiser_id","dtype":"category","description":"This column represents identifiers for advertisers."}],"time_column":null},{"name":"DocumentsMeta","source":"data/documents_meta.pqt","format":"parquet","columns":[{"name":"document_id","dtype":"primary_key","description":"This column represents unique document identifiers."},{"name":"source_id","dtype":"category","description":"This column represents identifiers for sources of documents."},{"name":"publisher_id","dtype":"category","description":"This column represents identifiers for publishers of documents."},{"name":"publish_time","dtype":"datetime","description":"This column represents the date and time when the document was published."}],"time_column":null},{"name":"DocumentsTopic","source":"data/documents_topics.pqt","format":"parquet","columns":[{"name":"dt_document_id","dtype":"category","description":"This column represents unique document identifiers."},{"name":"topic_id","dtype":"category","description":"This column represents identifiers for topics related to documents."},{"name":"confidence_level","dtype":"float","description":"This column represents the confidence level of a document belonging to a particular topic."}],"time_column":null},{"name":"DocumentsCategory","source":"data/documents_categories.pqt","format":"parquet","columns":[{"name":"dc_document_id","dtype":"category","description":"This column represents unique document identifiers."},{"name":"category_id","dtype":"category","description":"This column represents identifiers for categories assigned to documents."},{"name":"confidence_level","dtype":"float","description":"This column represents the confidence level of a document belonging to a particular category."}],"time_column":null},{"name":"DocumentsEntity","source":"data/documents_entities.pqt","format":"parquet","columns":[{"name":"de_document_id","dtype":"category","description":"This column represents unique document identifiers."},{"name":"entity_id","dtype":"category","description":"This column contains unique identifiers for entities associated with documents."},{"name":"confidence_level","dtype":"float","description":"This column represents the confidence level of a document being associated with a particular entity."}],"time_column":null}],"tasks":[{"name":"ctr","source":"ctr/{split}.pqt","format":"parquet","columns":[{"name":"cl_display_id","dtype":"category"},{"name":"cl_ad_id","dtype":"category"},{"name":"clicked","dtype":"category"},{"name":"timestamp","dtype":"datetime"}],"time_column":null,"evaluation_metric":"auroc","target_column":"clicked","target_table":"Click","task_type":"classification","key_prediction_label_column":"label","key_prediction_query_idx_column":"query_idx"}],"method":"r2n","column_groups":null}
        </schema>
        Here we gives the similarity score of each column pair, you can use this information to determine whether two columns may be joinable. The similarity score is scaled to [0, 1], the larger means the more similar.
        <similarity>
        The pair with the 1st highest similarity is column "document_id" from Table "Event" and column "document_id" from Table "DocumentsMeta" with similarity 0.926
The pair with the 2nd highest similarity is column "dt_document_id" from Table "DocumentsTopic" and column "dc_document_id" from Table "DocumentsCategory" with similarity 0.914
The pair with the 3rd highest similarity is column "dc_document_id" from Table "DocumentsCategory" and column "de_document_id" from Table "DocumentsEntity" with similarity 0.913
The pair with the 4th highest similarity is column "document_id" from Table "Event" and column "dc_document_id" from Table "DocumentsCategory" with similarity 0.906
The pair with the 5th highest similarity is column "pc_document_id" from Table "PromotedContent" and column "dt_document_id" from Table "DocumentsTopic" with similarity 0.906
The pair with the 6th highest similarity is column "pv_document_id" from Table "Pageview" and column "pc_document_id" from Table "PromotedContent" with similarity 0.906
The pair with the 7th highest similarity is column "pc_document_id" from Table "PromotedContent" and column "dc_document_id" from Table "DocumentsCategory" with similarity 0.903
The pair with the 8th highest similarity is column "dt_document_id" from Table "DocumentsTopic" and column "de_document_id" from Table "DocumentsEntity" with similarity 0.903
The pair with the 9th highest similarity is column "pc_document_id" from Table "PromotedContent" and column "de_document_id" from Table "DocumentsEntity" with similarity 0.902
The pair with the 10th highest similarity is column "document_id" from Table "Event" and column "de_document_id" from Table "DocumentsEntity" with similarity 0.902
The pair with the 11st highest similarity is column "document_id" from Table "DocumentsMeta" and column "de_document_id" from Table "DocumentsEntity" with similarity 0.902
The pair with the 12nd highest similarity is column "document_id" from Table "Event" and column "pc_document_id" from Table "PromotedContent" with similarity 0.899
The pair with the 13rd highest similarity is column "pc_document_id" from Table "PromotedContent" and column "document_id" from Table "DocumentsMeta" with similarity 0.897
The pair with the 14th highest similarity is column "document_id" from Table "DocumentsMeta" and column "dc_document_id" from Table "DocumentsCategory" with similarity 0.889
The pair with the 15th highest similarity is column "document_id" from Table "Event" and column "dt_document_id" from Table "DocumentsTopic" with similarity 0.880
The pair with the 16th highest similarity is column "document_id" from Table "DocumentsMeta" and column "dt_document_id" from Table "DocumentsTopic" with similarity 0.874
The pair with the 17th highest similarity is column "pv_document_id" from Table "Pageview" and column "de_document_id" from Table "DocumentsEntity" with similarity 0.873
The pair with the 18th highest similarity is column "document_id" from Table "Event" and column "pv_document_id" from Table "Pageview" with similarity 0.870
The pair with the 19th highest similarity is column "pv_document_id" from Table "Pageview" and column "dc_document_id" from Table "DocumentsCategory" with similarity 0.863
The pair with the 20th highest similarity is column "pv_document_id" from Table "Pageview" and column "dt_document_id" from Table "DocumentsTopic" with similarity 0.862

        </similarity>
        </input>
        Return your output in the json format inside <selection></selection>.
    