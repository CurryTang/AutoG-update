
        Imagine you are an expert graph data scientist, and now you are expected to construct graph schema based on the original
        inputs. You will be given an original schema represented in the dictionary format:
        <data>
            1. dataset_name: name of the dataset 
            2. tables: meta data for list of tables, each one will present following attributes
                1. name: table name
                2. source: source of the data, can either be a numpy .npz file or a parquet file
                3. columns: list of columns, each column will have following attributes
                    1. name: column name
                    2. dtype: column type, can be either text, categorical, float, primary_key, foreign_key, or multi_category.
                    primary_key and foreign_key are two special types of categorical columns, which presents a structural
                    relationship with other tables. Multi_category means this column is of list type, and each cell main contains
                    a list of categorical values. After a column is set as primary_key or foreign_key, it should not be changed to other types.
                    3. link_to (optional): if this column is a foreign key, point to which primary key from which table
            3. statistics of the table: statistics of the column value of tables. These statistics can be used to help you
            determine the characteristics of the columns. For example, if one categorical column only contains one unique value,
            then creating a node type based on this column can result in a super node, which is not ideal for graph construction.
            You should also determine whether two columns represent the same thing based on these statistics. 
            4. Dummy table is a special type of table. It's not explicitly defined with a table slot. It's defined in other tables, such as
            {"name": "nation", "dtype": "foreign_key", "link_to": "Country.CountryID"}. In this case, "Country" is a dummy table, which is not 
            explicitly defined in the tables slot.
        </data>                
        Here are the documents of the actions:
        
        Here is the introduction of the function generate_or_connect_dummy_table:
Description:
This function can be used in two ways:
1. Generate a dummy table with only one primary key
2. Turn an existing column with categorical type to an existing dummy table
"orig_col_name" must be a column with category type
Parameters:
dbb: the database object
base_table_name: the name of the original table
orig_col_name: the name of the original column in the original table, this should be a column with category type
new_table_name: the name of the new table to be created/connected
new_col_name: the name of the new column to be created/connected

Here is the introduction of the function connect_two_columns:
Description:
Connect two columns, this function can be used for the following case. Always put the column with category type in table 1.
1. A category column in table 1 is connected to a category column in table 2, in this case, a new dummy table will be created
2. A category column in table 1 is connected to a primary key column in table 2, in this case, the column in table 1 will be turned into a foreign key column. In case 2, table_2_col_name must be a primary key column
3. A category column in table 1 is connected to a non-category and non-primary key column in table 2, in this case, we will use a trick called Surrogate Key. 
4. If the column in table 1 is already a foreign key, then in this case it's probably a multi-column-point-to-one case, we need to update other fk columns too.
Parameters:
dbb: the database object
table_1_name: the name of the first table, 
table_1_col_name: the name of the column in the first table, this should be a column with category type
table_2_name: the name of the second table
table_2_col_name: the name of the column in the second table, this should be a column with category type

Here is the introduction of the function explode_multi_category_column:
Description:
Explode a multi-category column into multiple columns. You should determine whether to use this function. If you don't explode a multi-category column, it will be treated as a single category column automatically.
Parameters:
dbb: the database object
original_table: name of the original table where the multi-category column is located
multi_cat_col: the name of the multi-category column
primary_key_column: the name of the primary key column in the original table
new_table_name: the name of the new table to be created
new_col_name: the name of the new column to be created
dtype: the data type of the new column, if set to "foreign_key", this table will contain only "foreign_keys". In this case, it means you only want to use this column's relaion. If set to other types, this table will contain the original column's values, and a primary key will be added, this means you want to use this column's values.

Here is the introduction of the function generate_non_dummy_table:
Description:
Generate a non-dummy table with columns in the original table
Parameters:
dbb: the database object
base_table_name: the name of the original table
cols: the list of columns to be included in the new table and removed from the original table
new_table_name: the name of the new table to be created

Here is the introduction of the function remove_primary_key:
Description:
Remove a primary key constraint from a column in the original table
If the column is just an index, then the column will be removed from the table.
For example, if the schema is like {
    {"name": "id", "dtype": "primary_key"},
    {"name": "user", "dtype": "foreign_key", "link_to": "user.userID"},
    {"name": "book", "dtype": "foreign_key", "link_to": "book.bookID"},
}
In such case, it's clear that this table represents the role of an edge, while the presence of primary key prevents heuristic to turn this table into an edge. Primary key is not needed in this case.
In such case, we will remove the primary key constraint from the column.
Parameters:
dbb: the database object
base_table_name: the name of the original table
col_name: the name of the column in the original table

Here is the introduction of the function add_primary_key:
Description:
Add a primary key column to the original table
Parameters:
dbb: the database object
base_table_name: the name of the original table
col_name: the name of the newly added primary key column

        
        Now, you need to 
        1. Actively think about whether any one of the four actions should be conducted; If not, you can select "None" and then halt the program.
        2. output all actions you can think of from the above list to perform, and output your selection in the following format. It should be noted that for those actions with sequential relation like one new categorical column generated after expanding a multi-category column, you don't need to generate in one round.
        
        <selection>
        [{'explanation': <explanation for the selection>, 'action': <first action>, 'parameters': <parameters for the first action> },
        {'explanation': <explanation for the selection>, 'action': <second action>, 'parameters': <parameters for the second action> }, ...
        ]
        </selection>

        
        3. If not more action, output <selection>None</selection>
        
        Example:
        
Table: Paper
{
  "Column": "PaperID",
  "data type": "primary_key"
}
{
    "Column": "Title",
    "data type": "text",
    "Number of unique values": 10000,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": "Transformers",
    "5 sampled values": [
        "Transformers",
        "Graph Neural Networks",
        "Reinforcement Learning",
        "Meta Learning",
        "Computer Vision"
    ]
}
{
    "Column": "Authors",
    "data type": "multi_category",
    "Number of unique values": 987,
    "Number of nan values": 0,
    "Number of total values": 74320,
    "Mode values": "Yann LeCun",
    "5 sampled values": [
        "Yann LeCun",
        "Geoffrey Hinton",
        "Yoshua Bengio",
        "Fei-Fei Li",
        "Jitendra Malik"
    ]
}
{
    "Column": "Journal",
    "data type": "category",
    "Number of unique values": 100,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": "Nature",
    "5 sampled values": [
        "Nature",
        "Science",
        "NeurIPS",
        "ICML",
        "CVPR"
    ]
}
{
    "Column": "Year",
    "data type": "float",
}
{
    "Column": "Keywords",
    "data type": "category",
    "Number of unique values": 100,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": "Machine Learning",
    "5 sampled values": [
        "Machine Learning",
        "Deep Learning",
        "Graph Neural Networks",
        "Reinforcement Learning",
        "Meta Learning"
    ]
}
{
    "Column": "Abstract",
    "data type": "text",
    "Number of unique values": 10000,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": "This paper presents a new model for graph neural networks.",
    "5 sampled values": [
        "This paper presents a new model for graph neural networks.",
        "This paper introduces a new reinforcement learning algorithm.",
        "This paper presents a new model for transformers.",
        "This paper presents a new model for meta learning.",
        "This paper presents a new model for computer vision."
    ]
}
{
    "Column": "Category",
    "data type": "category",
    "Number of unique values": 10,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": 3,
    "5 sampled values": [
        3,
        4,
        1,
        6,
        9
    ]
}
{
  "Column": "ItemID",
  "data type": "foreign_key"
}
Table: Journal
{
  "Column": "JournalID",
  "data type": "primary_key"
}
{
  "Column": "Name",
  "data type": "text", 
    "Number of unique values": 100,
    "Number of nan values": 0,
    "Number of total values": 100,
    "Mode values": "Nature",
    "5 sampled values": [
        "Nature",
        "Science",
        "NeurIPS",
        "ICML",
        "CVPR"
    ]
}
{
    "Column": "ImpactFactor",
    "data type": "float"
}
{
    "Column": "Country",
    "data type": "category",
    "Number of unique values": 10,
    "Number of nan values": 0,
    "Number of total values": 100,
    "Mode values": "USA",
    "5 sampled values": [
        "USA",
        "USA",
        "Canada",
        "UK",
        "USA"
    ]
}
{
    "Column": "Publisher",
    "data type": "text",
    "Number of unique values": 9,
    "Number of nan values": 0,
    "Number of total values": 100,
    "Mode values": "Springer",
    "5 sampled values": [
        "Springer",
        "Elsevier",
        "ACM",
        "IEEE",
        "Nature"
    ]
}
{
    "Column": "PublisherLocation",
    "data type": "category",
    "Number of unique values": 5,
    "Number of nan values": 0,
    "Number of total values": 100,
    "Mode values": "USA",
    "5 sampled values": [
        "USA",
        "USA",
        "Canada",
        "UK",
        "USA"
    ]
}

</dataset_stats>
<tasks>
Now I want to train a model which can predict the category of a paper based on the information in the paper.
</tasks>
<schema>
{
        "dataset_name": "Papers",
        "tables": [
            {
                "name": "Paper",
                "source": "data/paper.npz",
                "columns": [
                    {"name": "PaperID", "dtype": "primary_key"},
                    {"name": "Title", "dtype": "text"},
                    {"name": "Authors", "dtype": "multi_category"},
                    {"name": "Journal", "dtype": "category"},
                    {"name": "Year", "dtype": "float"},
                    {"name": "Keywords", "dtype": "category"},
                    {"name": "Abstract", "dtype": "text"},
                    {"name": "Category", "dtype": "category"}
                ]
            }, 
            {
                "name": "Journal",
                "source": "data/journal.npz",
                "columns": [
                    {"name": "JournalID", "dtype": "primary_key"},
                    {"name": "Name", "dtype": "text"},
                    {"name": "ImpactFactor", "dtype": "float"},
                    {"name": "Country", "dtype": "category"},
                    {"name": "Publisher", "dtype": "text"},
                    {"name": "PublisherLocation", "dtype": "category"}
                ]
            }
        ]
    }
</schema>
Here we gives the similarity score of each column pair, you can use this information to determine whether two columns may be joinable. The similarity score is scaled to [0, 1], the larger means the more similar.
<similarity>
The pair with the 1st highest similarity is column "Journal" from Table "Paper" and column "Name" from Table "Journal" with similarity 0.885
The pair with the 2nd highest similarity is column "Authors" from Table "Paper" and column "Name" from Table "Journal" with similarity 0.743
The pair with the 3rd highest similarity is column "Authors" from Table "Paper" and column "Country" from Table "Journal" with similarity 0.723
</similarity>
</input>



We need to think about whether we need to do one of the six actions:
1. First, for explode_multi_category_column, the Authors of the paper are in a multi-category column. Moreover, author is closely related to the category of the paper, so the relationship Paper-Author-Paper can be very useful. So, we need to explode this multi category column.
2. For connect_two_columns, the Journal column in the Paper table and the  column Name in the Journal table are highly similar, so we can connect these two columns with a foreign key constraint. Other pairs like Authors and Name, Authors and Country are not similar enough to be connected.
3. For generate_non_dummy_table, the Publisher and PublisherLocation columns are independent columns for the entity Publisher. We can generate a new table Publisher with these two columns.
4. For generate_or_connect_dummy_table, we need to find those categorical columns beneficial for downstream task. We have categorical columns (Journal has been deleted in step 2, Category is the final objective) Keyword, Country, this will result in relationship Paper-Keyword-Paper and Paper-Journal-Country-Journal-Paper respectively. Since the target is to predict the category of a paper, we can generate a dummy table for the column Keyword since paper sharing the same keyword are highly likely to share the same category. Country may be not beneficial since it doesn't present a strong semantic relationship with the category. 
5. For remove_primary_key and add_primary_key, there's no unreasonable primary key or missing primary key in the table, so we don't need to do this action. as a result, we have the following actions
<selection>
        [{{'explanation': "Author is multi-category and Paper-Author-Paper is probably useful. We set the dtype to foreign_key because we want to use the relation", 'action': 'explode_multi_category_column', 'parameters': {'original_table': 'Paper', 'multi_cat_col': 'Author', primary_key_column: 'PaperID', 'new_table_name': 'Author', 'new_col_name': 'AuthorName', 'dtype': 'foreign_key'}},
        {{'explanation': 'the Journal column in the Paper table and the  column Name in the Journal table are highly similar, both of them should refer to the name of the journal', 'action': 'connect_two_columns', 'parameters': {'table_1_name': 'Paper', 'table_1_col_name': 'Journal', 'table_2_name': 'Journal', 'table_2_col_name': 'Name', 'new_table_name': "", 'new_table_col_name': "" }}, 
        {{'explanation': 'Publisher and PublisherLocation are independent columns for the entity Publisher. We can generate a new table Publisher with these two columns', 'action': 'generate_non_dummy_table', 'parameters': {'base_table_name': 'Paper', 'cols': ['Publisher', 'PublisherLocation'],  'new_table_name': 'Publisher'}},
        {{'explanation': 'Keyword is a categorical column which can be used to generate a dummy table. Country is not beneficial for the downstream task', 'action': 'generate_or_connect_dummy_table', 'parameters': {'base_table_name': 'Paper', 'orig_col_name': 'Keyword', 'new_table_name': 'Keyword', 'new_col_name': 'Keyword'}},
        ]
        </selection>

    

        
        History Actions:
        {"explanation": "We need to create a Session table since purchase_session should point to it. The session IDs across View (view_session), Purchase (purchase_session), and Query (query_sessionId) tables refer to the same entity but are currently disconnected.", "action": "generate_or_connect_dummy_table", "parameters": {"base_table_name": "Query", "orig_col_name": "query_sessionId", "new_table_name": "Session", "new_col_name": "sessionId"}}

{"explanation": "Creating a User table to serve as a hub for user-related data. Currently user information is scattered across View (view_user) and Query (query_userId) with high similarity (0.926).", "action": "generate_or_connect_dummy_table", "parameters": {"base_table_name": "Query", "orig_col_name": "query_userId", "new_table_name": "User", "new_col_name": "userId"}}

{"explanation": "Creating an Order table based on Purchase.ordernumber to better represent the e-commerce domain model where orders contain purchased items.", "action": "generate_or_connect_dummy_table", "parameters": {"base_table_name": "Purchase", "orig_col_name": "ordernumber", "new_table_name": "Order", "new_col_name": "orderId"}}

{"explanation": "Connect Query.queryId and QueryResult.queryId with foreign key relationship since they have high similarity (0.879) and refer to the same entity.", "action": "connect_two_columns", "parameters": {"table_1_name": "QueryResult", "table_1_col_name": "queryId", "table_2_name": "Query", "table_2_col_name": "queryId"}}

{"explanation": "Connect Click.queryId to Query.queryId with foreign key relationship since they have high similarity (0.911) and refer to the same entity.", "action": "connect_two_columns", "parameters": {"table_1_name": "Click", "table_1_col_name": "queryId", "table_2_name": "Query", "table_2_col_name": "queryId"}}

{"explanation": "Connect QuerySearchstringToken.queryId to Query.queryId with foreign key relationship since they have high similarity (0.873) and refer to the same entity.", "action": "connect_two_columns", "parameters": {"table_1_name": "QuerySearchstringToken", "table_1_col_name": "queryId", "table_2_name": "Query", "table_2_col_name": "queryId"}}

{"explanation": "Connect View.view_session to the newly created Session.sessionId with foreign key relationship since they represent the same entity.", "action": "connect_two_columns", "parameters": {"table_1_name": "View", "table_1_col_name": "view_session", "table_2_name": "Session", "table_2_col_name": "sessionId"}}

{"explanation": "Connect Purchase.purchase_session to Session.sessionId with foreign key relationship since they represent the same entity and this was explicitly mentioned in the task requirements.", "action": "connect_two_columns", "parameters": {"table_1_name": "Purchase", "table_1_col_name": "purchase_session", "table_2_name": "Session", "table_2_col_name": "sessionId"}}

{"explanation": "Connect View.view_user to User.userId with foreign key relationship since they have high similarity with Query.query_userId (0.926) and refer to the same entity.", "action": "connect_two_columns", "parameters": {"table_1_name": "View", "table_1_col_name": "view_user", "table_2_name": "User", "table_2_col_name": "userId"}}

{"explanation": "Connect Purchase.purchaser to User.userId with foreign key relationship since it represents the user making the purchase and should be linked to the User entity.", "action": "connect_two_columns", "parameters": {"table_1_name": "Purchase", "table_1_col_name": "purchaser", "table_2_name": "User", "table_2_col_name": "userId"}}

{"explanation": "Connect QueryResult.itemId to Product.itemId with foreign key relationship since they have high similarity (0.927) and refer to the same entity.", "action": "connect_two_columns", "parameters": {"table_1_name": "QueryResult", "table_1_col_name": "itemId", "table_2_name": "Product", "table_2_col_name": "itemId"}}

{"explanation": "Connect Click.itemId to Product.itemId with foreign key relationship since they have high similarity (0.932) and refer to the same entity.", "action": "connect_two_columns", "parameters": {"table_1_name": "Click", "table_1_col_name": "itemId", "table_2_name": "Product", "table_2_col_name": "itemId"}}

{"explanation": "Connect View.itemId to Product.itemId with foreign key relationship since they have high similarity (0.931) and refer to the same entity.", "action": "connect_two_columns", "parameters": {"table_1_name": "View", "table_1_col_name": "itemId", "table_2_name": "Product", "table_2_col_name": "itemId"}}

{"explanation": "Connect Purchase.itemId to Product.itemId with foreign key relationship since they have high similarity (0.914) and refer to the same entity.", "action": "connect_two_columns", "parameters": {"table_1_name": "Purchase", "table_1_col_name": "itemId", "table_2_name": "Product", "table_2_col_name": "itemId"}}

{"explanation": "Explode the name_tokens multi-category column to create a new table for product tokens. This will enable better utilization of product name information in the graph.", "action": "explode_multi_category_column", "parameters": {"original_table": "Product", "multi_cat_col": "name_tokens", "primary_key_column": "itemId", "new_table_name": "ProductToken", "new_col_name": "token", "dtype": "foreign_key"}}

{"explanation": "Creating a Token table from the search_token column to enable connections with product name tokens, establishing an important semantic link between search queries and product attributes.", "action": "generate_or_connect_dummy_table", "parameters": {"base_table_name": "QuerySearchstringToken", "orig_col_name": "search_token", "new_table_name": "Token", "new_col_name": "tokenId"}}

{"explanation": "Connect the tokens in ProductToken.token to Token.tokenId to establish a semantic relationship between what users search for and product attributes. This creates an important path: Query \u2192 QuerySearchstringToken \u2192 Token \u2194 ProductToken \u2192 Product", "action": "connect_two_columns", "parameters": {"table_1_name": "ProductToken", "table_1_col_name": "token", "table_2_name": "Token", "table_2_col_name": "tokenId"}}
        
        <input>
        <dataset_stats>
        Analysis for Table QueryResult:
  Column: queryId
    Max: 980503
    Min: 1
    Mode: 53466
    Sampled Values: [912743 974446 649718 822267 804297]
    Number of Total Values: 92271275
    Number of Unique Values: 636160
  Column: itemId
    Max: 736383
    Min: 1
    Mode: 4991
    Sampled Values: [ 30831     90 382497   6174  13319]
    Number of Total Values: 92271275
    Number of Unique Values: 129512
  Column: timestamp
    Max: 2016-10-26T18:50:30.578000000
    Min: 2016-01-01T01:08:12.072000000
    Mode: 2016-02-11 21:48:20.387000
    Sampled Values: ['2016-04-26T12:38:03.803000000' '2016-04-04T18:41:22.768000000'
 '2016-05-29T07:48:02.918000000' '2016-03-17T16:36:26.373000000'
 '2016-03-09T23:47:42.219000000']
    Number of Total Values: 92271275
    Number of Unique Values: 636137

Analysis for Table Click:
  Column: queryId
    Max: 980503
    Min: 1
    Mode: 856206
    Sampled Values: [190385 891077 834679 482270 619392]
    Number of Total Values: 1127760
    Number of Unique Values: 633730
  Column: itemId
    Max: 731041
    Min: 2
    Mode: 79141
    Sampled Values: [101262 131616  34818  65121 436011]
    Number of Total Values: 1127760
    Number of Unique Values: 74635
  Column: timestamp
    Max: 2016-10-26T18:52:14.376000000
    Min: 2016-01-01T01:08:15.784000000
    Mode: 2016-03-18 02:05:10.580000
    Sampled Values: ['2016-04-25T01:04:56.361000000' '2016-04-29T14:00:31.272000000'
 '2016-03-21T22:11:00.406000000' '2016-05-02T08:32:14.923000000'
 '2016-05-27T14:18:24.304000000']
    Number of Total Values: 1127760
    Number of Unique Values: 1117374

Analysis for Table View:
  Column: view_session
    Max: 600687
    Min: 1
    Mode: 480263
    Sampled Values: [550903 132583 138160 378898   1576]
    Number of Total Values: 1235380
    Number of Unique Values: 310324
  Column: view_user
    Max: nan
    Min: nan
    Mode: 17732.0
    Sampled Values: [112627.     nan     nan     nan     nan]
    Number of Total Values: 1235380
    Number of Unique Values: 87934
  Column: itemId
    Max: 733848
    Min: 1
    Mode: 79141
    Sampled Values: [207202  40411   7468 196371  10297]
    Number of Total Values: 1235380
    Number of Unique Values: 122993
  Column: timestamp
    Max: 2016-06-02T00:19:05.937000000
    Min: 2016-01-01T01:08:17.154000000
    Mode: 2016-02-03 07:44:21.611000
    Sampled Values: ['2016-04-02T15:25:47.451000000' '2016-03-13T02:52:52.735000000'
 '2016-04-08T04:38:14.038000000' '2016-02-11T11:55:32.367000000'
 '2016-03-22T16:32:49.246000000']
    Number of Total Values: 1235380
    Number of Unique Values: 1235286

Analysis for Table Purchase:
  Column: purchase_session
    Max: 600661
    Min: 150
    Mode: 13366
    Sampled Values: [520654  13366 303333 169286 510111]
    Number of Total Values: 18025
    Number of Unique Values: 12630
  Column: purchaser
    Max: nan
    Min: nan
    Mode: 10591.0
    Sampled Values: [    nan 155397.     nan 177763.     nan]
    Number of Total Values: 18025
    Number of Unique Values: 4425
  Column: ordernumber
    Max: 22817
    Min: 2
    Mode: 5580
    Sampled Values: [ 9737  3085  1068 20271 17919]
    Number of Total Values: 18025
    Number of Unique Values: 13506
  Column: itemId
    Max: 691863
    Min: 2
    Mode: 10858
    Sampled Values: [ 19806 294967 173561  25762   1356]
    Number of Total Values: 18025
    Number of Unique Values: 11244
  Column: timestamp
    Max: 2016-11-09T16:30:29.641000000
    Min: 2016-01-02T08:51:07.714000000
    Mode: 2016-03-17 06:09:06.839000
    Sampled Values: ['2016-02-04T02:05:52.858000000' '2016-04-28T02:49:08.127000000'
 '2016-03-02T19:09:51.673000000' '2016-04-19T12:46:31.398000000'
 '2016-02-14T17:29:11.877000000']
    Number of Total Values: 18025
    Number of Unique Values: 13657

Analysis for Table QuerySearchstringToken:
  Column: queryId
    Max: 53453
    Min: 1
    Mode: 20595
    Sampled Values: [16843  2181 39398 38644 39892]
    Number of Total Values: 138260
    Number of Unique Values: 51888
  Column: search_token
    Mode: 16655
    Sampled Values: ['189052...', '528752...', '2936...', '531228...', '528884...']
    Number of Total Values: 138260
    Number of Unique Values: 19075

Analysis for Table Query:
  Column: queryId
    Max: 980503
    Min: 1
    Mode: 1
    Sampled Values: [766231 798523 812884 678390 683773]
    Number of Total Values: 636160
    Number of Unique Values: 636160
  Column: query_sessionId
    Max: 600687
    Min: 1
    Mode: 48445
    Sampled Values: [ 78649 126459 227992  75651 194245]
    Number of Total Values: 636160
    Number of Unique Values: 368782
  Column: query_userId
    Max: nan
    Min: nan
    Mode: 24034.0
    Sampled Values: [145327.     nan     nan     nan  13343.]
    Number of Total Values: 636160
    Number of Unique Values: 140387
  Column: duration
    Max: 73021
    Min: 39
    Mode: 1013
    Sampled Values: [2347 1166  548  195 3009]
    Number of Total Values: 636160
    Number of Unique Values: 7046
  Column: categoryId
    Max: 1297
    Min: 0
    Mode: 0
    Sampled Values: [1010  751  965  868    0]
    Number of Total Values: 636160
    Number of Unique Values: 1101
  Column: timestamp
    Max: 2016-10-26T18:50:30.578000000
    Min: 2016-01-01T01:08:12.072000000
    Mode: 2016-02-05 20:34:01.122000
    Sampled Values: ['2016-02-13T22:05:10.830000000' '2016-05-06T22:54:28.493000000'
 '2016-04-27T13:09:06.420000000' '2016-05-14T16:08:57.454000000'
 '2016-03-20T22:04:02.333000000']
    Number of Total Values: 636160
    Number of Unique Values: 636137

Analysis for Table Product:
  Column: itemId
    Max: 736383
    Min: 1
    Mode: 1
    Sampled Values: [  9990 375219   9289  71219 133482]
    Number of Total Values: 184047
    Number of Unique Values: 184047
  Column: categoryId
    Max: 1297
    Min: 2
    Mode: 807
    Sampled Values: [ 278  122   71 1009  219]
    Number of Total Values: 184047
    Number of Unique Values: 1217
  Column: pricelog2
    Max: 15
    Min: 0
    Mode: 0
    Sampled Values: [8 8 0 0 5]
    Number of Total Values: 184047
    Number of Unique Values: 13

Analysis for Table ProductToken:
  Column: itemId
    Max: 736383
    Min: 1
    Mode: 614681
    Sampled Values: [  8336 124441  21777 506356 199856]
    Number of Total Values: 941645
    Number of Unique Values: 184047
  Column: token
    Mode: 776
    Sampled Values: ['380771...', '111804...', '25489...', '1315...', '14703...']
    Number of Total Values: 941645
    Number of Unique Values: 164774


        </dataset_stats>
        <task>
        This task is to predict whether a user will purchase an item given the item information and user-item structural information. In the task table, you are given itemId, queryId, timestamp, and clicked. The target is clicked. Moreover, itemId is a foreign key pointing to itemId of the Product table. purchase_session is a foreign key pointing to the Session table, which inspires that there should be one table Session
        </task>
        <schema>
        {"dataset_name":"diginetica","tables":[{"name":"QueryResult","source":"data/query_results.pqt","format":"parquet","columns":[{"name":"queryId","dtype":"foreign_key","description":"This column likely represents unique query identifiers, as it has a large number of unique values.","link_to":"Query.queryId"},{"name":"itemId","dtype":"foreign_key","description":"This column likely represents unique item identifiers, as it has a large number of unique values.","link_to":"Product.itemId"},{"name":"timestamp","dtype":"datetime","description":"This column represents the timestamp of query-related events, containing full datetime values."}],"time_column":null},{"name":"Click","source":"data/clicks.pqt","format":"parquet","columns":[{"name":"queryId","dtype":"foreign_key","description":"This column likely represents unique query identifiers, as it has a large number of unique values.","link_to":"Query.queryId"},{"name":"itemId","dtype":"foreign_key","description":"This column likely represents unique item identifiers, as it has a large number of unique values.","link_to":"Product.itemId"},{"name":"timestamp","dtype":"datetime","description":"This column represents the timestamp of click-related events, containing full datetime values."}],"time_column":null},{"name":"View","source":"data/item_views.pqt","format":"parquet","columns":[{"name":"view_session","dtype":"foreign_key","description":"This column likely represents unique session identifiers for views, as it has a significant number of unique values.","link_to":"Session.sessionId"},{"name":"view_user","dtype":"foreign_key","description":"This column likely represents unique user identifiers for views, as it has many unique values but also contains missing values.","link_to":"User.userId"},{"name":"itemId","dtype":"foreign_key","description":"This column likely represents unique item identifiers, as it has a large number of unique values.","link_to":"Product.itemId"},{"name":"timestamp","dtype":"datetime","description":"This column represents the timestamp of view-related events, containing full datetime values."}],"time_column":null},{"name":"Purchase","source":"data/purchases.pqt","format":"parquet","columns":[{"name":"purchase_session","dtype":"foreign_key","description":"This column likely represents unique session identifiers for purchases, as it has a significant number of unique values.","link_to":"Session.sessionId"},{"name":"purchaser","dtype":"foreign_key","description":"This column likely represents unique purchaser identifiers, as it has many unique values but also contains missing values.","link_to":"User.userId"},{"name":"ordernumber","dtype":"foreign_key","description":"This column likely represents unique order numbers, as it has many unique values.","link_to":"Order.orderId"},{"name":"itemId","dtype":"foreign_key","description":"This column likely represents unique item identifiers, as it has a large number of unique values.","link_to":"Product.itemId"},{"name":"timestamp","dtype":"datetime","description":"This column represents the timestamp of purchase-related events, containing full datetime values."}],"time_column":null},{"name":"QuerySearchstringToken","source":"data/query_searchstring_tokens.pqt","format":"parquet","columns":[{"name":"queryId","dtype":"foreign_key","description":"This column likely represents unique query identifiers, as it has a significant number of unique values.","link_to":"Query.queryId"},{"name":"search_token","dtype":"foreign_key","description":"This column represents a list of search tokens associated with a query, making it a multi-category field.","link_to":"Token.tokenId"}],"time_column":null},{"name":"Query","source":"data/queries.pqt","format":"parquet","columns":[{"name":"queryId","dtype":"primary_key","description":"This column likely represents unique query identifiers, as each value appears to be unique."},{"name":"query_sessionId","dtype":"foreign_key","description":"This column likely represents session identifiers for queries, as it has a moderate number of unique values.","link_to":"Session.sessionId"},{"name":"query_userId","dtype":"foreign_key","description":"This column likely represents user identifiers associated with queries, but contains missing values.","link_to":"User.userId"},{"name":"duration","dtype":"float","description":"This column likely represents the duration of a query event, as it contains numerical values with many unique values."},{"name":"categoryId","dtype":"category","description":"This column likely represents a categorical classification for queries, as the number of unique values is limited."},{"name":"timestamp","dtype":"datetime","description":"This column represents the timestamp of query-related events, containing full datetime values."}],"time_column":null},{"name":"Product","source":"data/products.pqt","format":"parquet","columns":[{"name":"itemId","dtype":"primary_key","description":"This column likely represents unique product identifiers, as each value appears to be unique."},{"name":"categoryId","dtype":"category","description":"This column represents product categories, as the number of unique values is limited."},{"name":"pricelog2","dtype":"float","description":"This column represents a numerical price transformation (likely log-scaled), as it contains numerical values with some distinct values."}],"time_column":null},{"name":"ProductToken","source":"data/producttoken.pqt","format":"parquet","columns":[{"name":"itemId","dtype":"foreign_key","link_to":"Product.itemId"},{"name":"token","dtype":"foreign_key","link_to":"Token.tokenId"}],"time_column":null}],"tasks":[{"name":"purchase","source":"purchase/purchase_{split}.pqt","format":"parquet","columns":[{"name":"itemId","dtype":"foreign_key"},{"name":"purchase_session","dtype":"category"},{"name":"timestamp","dtype":"datetime"}],"time_column":null,"evaluation_metric":"mrr","target_column":"itemId","target_table":"Purchase","task_type":"retrieval","key_prediction_label_column":"label","key_prediction_query_idx_column":"query_idx"}],"method":"r2n","column_groups":null}
        </schema>
        Here we gives the similarity score of each column pair, you can use this information to determine whether two columns may be joinable. The similarity score is scaled to [0, 1], the larger means the more similar.
        <similarity>
        The pair with the 1st highest similarity is column "categoryId" from Table "Query" and column "categoryId" from Table "Product" with similarity 0.963
The pair with the 2nd highest similarity is column "queryId" from Table "Query" and column "query_sessionId" from Table "Query" with similarity 0.800
The pair with the 3rd highest similarity is column "queryId" from Table "QuerySearchstringToken" and column "query_sessionId" from Table "Query" with similarity 0.787
The pair with the 4th highest similarity is column "queryId" from Table "Click" and column "query_sessionId" from Table "Query" with similarity 0.785
The pair with the 5th highest similarity is column "queryId" from Table "QueryResult" and column "query_sessionId" from Table "Query" with similarity 0.764
The pair with the 6th highest similarity is column "itemId" from Table "Purchase" and column "categoryId" from Table "Product" with similarity 0.715
The pair with the 7th highest similarity is column "queryId" from Table "QuerySearchstringToken" and column "itemId" from Table "ProductToken" with similarity 0.706
The pair with the 8th highest similarity is column "itemId" from Table "Click" and column "categoryId" from Table "Product" with similarity 0.699
The pair with the 9th highest similarity is column "queryId" from Table "QuerySearchstringToken" and column "itemId" from Table "Product" with similarity 0.692
The pair with the 10th highest similarity is column "itemId" from Table "View" and column "categoryId" from Table "Product" with similarity 0.689
The pair with the 11st highest similarity is column "itemId" from Table "Click" and column "queryId" from Table "QuerySearchstringToken" with similarity 0.688
The pair with the 12nd highest similarity is column "itemId" from Table "Purchase" and column "queryId" from Table "QuerySearchstringToken" with similarity 0.684
The pair with the 13rd highest similarity is column "queryId" from Table "Query" and column "itemId" from Table "ProductToken" with similarity 0.674
The pair with the 14th highest similarity is column "itemId" from Table "QueryResult" and column "queryId" from Table "Query" with similarity 0.673
The pair with the 15th highest similarity is column "itemId" from Table "View" and column "queryId" from Table "QuerySearchstringToken" with similarity 0.671
The pair with the 16th highest similarity is column "categoryId" from Table "Product" and column "itemId" from Table "ProductToken" with similarity 0.670
The pair with the 17th highest similarity is column "itemId" from Table "Click" and column "queryId" from Table "Query" with similarity 0.668
The pair with the 18th highest similarity is column "itemId" from Table "QueryResult" and column "queryId" from Table "QuerySearchstringToken" with similarity 0.665
The pair with the 19th highest similarity is column "itemId" from Table "QueryResult" and column "categoryId" from Table "Product" with similarity 0.664
The pair with the 20th highest similarity is column "queryId" from Table "QueryResult" and column "itemId" from Table "Click" with similarity 0.656

        </similarity>
        </input>
        Return your output in the json format inside <selection></selection>.
    