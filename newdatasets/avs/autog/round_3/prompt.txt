
        Imagine you are an expert graph data scientist, and now you are expected to construct graph schema based on the original
        inputs. You will be given an original schema represented in the dictionary format:
        <data>
            1. dataset_name: name of the dataset 
            2. tables: meta data for list of tables, each one will present following attributes
                1. name: table name
                2. source: source of the data, can either be a numpy .npz file or a parquet file
                3. columns: list of columns, each column will have following attributes
                    1. name: column name
                    2. dtype: column type, can be either text, categorical, float, primary_key, foreign_key, or multi_category.
                    primary_key and foreign_key are two special types of categorical columns, which presents a structural
                    relationship with other tables. Multi_category means this column is of list type, and each cell main contains
                    a list of categorical values. After a column is set as primary_key or foreign_key, it should not be changed to other types.
                    3. link_to (optional): if this column is a foreign key, point to which primary key from which table
            3. statistics of the table: statistics of the column value of tables. These statistics can be used to help you
            determine the characteristics of the columns. For example, if one categorical column only contains one unique value,
            then creating a node type based on this column can result in a super node, which is not ideal for graph construction.
            You should also determine whether two columns represent the same thing based on these statistics. 
            4. Dummy table is a special type of table. It's not explicitly defined with a table slot. It's defined in other tables, such as
            {"name": "nation", "dtype": "foreign_key", "link_to": "Country.CountryID"}. In this case, "Country" is a dummy table, which is not 
            explicitly defined in the tables slot.
        </data>                
        Here are the documents of the actions:
        
        Here is the introduction of the function generate_or_connect_dummy_table:
Description:
This function can be used in two ways:
1. Generate a dummy table with only one primary key
2. Turn an existing column with categorical type to an existing dummy table
"orig_col_name" must be a column with category type
Parameters:
dbb: the database object
base_table_name: the name of the original table
orig_col_name: the name of the original column in the original table, this should be a column with category type
new_table_name: the name of the new table to be created/connected
new_col_name: the name of the new column to be created/connected

Here is the introduction of the function connect_two_columns:
Description:
Connect two columns, this function can be used for the following case. Always put the column with category type in table 1.
1. A category column in table 1 is connected to a category column in table 2, in this case, a new dummy table will be created
2. A category column in table 1 is connected to a primary key column in table 2, in this case, the column in table 1 will be turned into a foreign key column. In case 2, table_2_col_name must be a primary key column
3. A category column in table 1 is connected to a non-category and non-primary key column in table 2, in this case, we will use a trick called Surrogate Key. 
4. If the column in table 1 is already a foreign key, then in this case it's probably a multi-column-point-to-one case, we need to update other fk columns too.
Parameters:
dbb: the database object
table_1_name: the name of the first table, 
table_1_col_name: the name of the column in the first table, this should be a column with category type
table_2_name: the name of the second table
table_2_col_name: the name of the column in the second table, this should be a column with category type

Here is the introduction of the function explode_multi_category_column:
Description:
Explode a multi-category column into multiple columns. You should determine whether to use this function. If you don't explode a multi-category column, it will be treated as a single category column automatically.
Parameters:
dbb: the database object
original_table: name of the original table where the multi-category column is located
multi_cat_col: the name of the multi-category column
primary_key_column: the name of the primary key column in the original table
new_table_name: the name of the new table to be created
new_col_name: the name of the new column to be created
dtype: the data type of the new column, if set to "foreign_key", this table will contain only "foreign_keys". In this case, it means you only want to use this column's relaion. If set to other types, this table will contain the original column's values, and a primary key will be added, this means you want to use this column's values.

Here is the introduction of the function generate_non_dummy_table:
Description:
Generate a non-dummy table with columns in the original table
Parameters:
dbb: the database object
base_table_name: the name of the original table
cols: the list of columns to be included in the new table and removed from the original table
new_table_name: the name of the new table to be created

Here is the introduction of the function remove_primary_key:
Description:
Remove a primary key constraint from a column in the original table
If the column is just an index, then the column will be removed from the table.
For example, if the schema is like {
    {"name": "id", "dtype": "primary_key"},
    {"name": "user", "dtype": "foreign_key", "link_to": "user.userID"},
    {"name": "book", "dtype": "foreign_key", "link_to": "book.bookID"},
}
In such case, it's clear that this table represents the role of an edge, while the presence of primary key prevents heuristic to turn this table into an edge. Primary key is not needed in this case.
In such case, we will remove the primary key constraint from the column.
Parameters:
dbb: the database object
base_table_name: the name of the original table
col_name: the name of the column in the original table

Here is the introduction of the function add_primary_key:
Description:
Add a primary key column to the original table
Parameters:
dbb: the database object
base_table_name: the name of the original table
col_name: the name of the newly added primary key column

        
        Now, you need to 
        1. Actively think about whether any one of the four actions should be conducted; If not, you can select "None" and then halt the program.
        2. output all actions you can think of from the above list to perform, and output your selection in the following format. It should be noted that for those actions with sequential relation like one new categorical column generated after expanding a multi-category column, you don't need to generate in one round.
        
        <selection>
        [{'explanation': <explanation for the selection>, 'action': <first action>, 'parameters': <parameters for the first action> },
        {'explanation': <explanation for the selection>, 'action': <second action>, 'parameters': <parameters for the second action> }, ...
        ]
        </selection>

        
        3. If not more action, output <selection>None</selection>
        
        Example:
        
Table: Paper
{
  "Column": "PaperID",
  "data type": "primary_key"
}
{
    "Column": "Title",
    "data type": "text",
    "Number of unique values": 10000,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": "Transformers",
    "5 sampled values": [
        "Transformers",
        "Graph Neural Networks",
        "Reinforcement Learning",
        "Meta Learning",
        "Computer Vision"
    ]
}
{
    "Column": "Authors",
    "data type": "multi_category",
    "Number of unique values": 987,
    "Number of nan values": 0,
    "Number of total values": 74320,
    "Mode values": "Yann LeCun",
    "5 sampled values": [
        "Yann LeCun",
        "Geoffrey Hinton",
        "Yoshua Bengio",
        "Fei-Fei Li",
        "Jitendra Malik"
    ]
}
{
    "Column": "Journal",
    "data type": "category",
    "Number of unique values": 100,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": "Nature",
    "5 sampled values": [
        "Nature",
        "Science",
        "NeurIPS",
        "ICML",
        "CVPR"
    ]
}
{
    "Column": "Year",
    "data type": "float",
}
{
    "Column": "Keywords",
    "data type": "category",
    "Number of unique values": 100,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": "Machine Learning",
    "5 sampled values": [
        "Machine Learning",
        "Deep Learning",
        "Graph Neural Networks",
        "Reinforcement Learning",
        "Meta Learning"
    ]
}
{
    "Column": "Abstract",
    "data type": "text",
    "Number of unique values": 10000,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": "This paper presents a new model for graph neural networks.",
    "5 sampled values": [
        "This paper presents a new model for graph neural networks.",
        "This paper introduces a new reinforcement learning algorithm.",
        "This paper presents a new model for transformers.",
        "This paper presents a new model for meta learning.",
        "This paper presents a new model for computer vision."
    ]
}
{
    "Column": "Category",
    "data type": "category",
    "Number of unique values": 10,
    "Number of nan values": 0,
    "Number of total values": 10000,
    "Mode values": 3,
    "5 sampled values": [
        3,
        4,
        1,
        6,
        9
    ]
}
{
  "Column": "ItemID",
  "data type": "foreign_key"
}
Table: Journal
{
  "Column": "JournalID",
  "data type": "primary_key"
}
{
  "Column": "Name",
  "data type": "text", 
    "Number of unique values": 100,
    "Number of nan values": 0,
    "Number of total values": 100,
    "Mode values": "Nature",
    "5 sampled values": [
        "Nature",
        "Science",
        "NeurIPS",
        "ICML",
        "CVPR"
    ]
}
{
    "Column": "ImpactFactor",
    "data type": "float"
}
{
    "Column": "Country",
    "data type": "category",
    "Number of unique values": 10,
    "Number of nan values": 0,
    "Number of total values": 100,
    "Mode values": "USA",
    "5 sampled values": [
        "USA",
        "USA",
        "Canada",
        "UK",
        "USA"
    ]
}
{
    "Column": "Publisher",
    "data type": "text",
    "Number of unique values": 9,
    "Number of nan values": 0,
    "Number of total values": 100,
    "Mode values": "Springer",
    "5 sampled values": [
        "Springer",
        "Elsevier",
        "ACM",
        "IEEE",
        "Nature"
    ]
}
{
    "Column": "PublisherLocation",
    "data type": "category",
    "Number of unique values": 5,
    "Number of nan values": 0,
    "Number of total values": 100,
    "Mode values": "USA",
    "5 sampled values": [
        "USA",
        "USA",
        "Canada",
        "UK",
        "USA"
    ]
}

</dataset_stats>
<tasks>
Now I want to train a model which can predict the category of a paper based on the information in the paper.
</tasks>
<schema>
{
        "dataset_name": "Papers",
        "tables": [
            {
                "name": "Paper",
                "source": "data/paper.npz",
                "columns": [
                    {"name": "PaperID", "dtype": "primary_key"},
                    {"name": "Title", "dtype": "text"},
                    {"name": "Authors", "dtype": "multi_category"},
                    {"name": "Journal", "dtype": "category"},
                    {"name": "Year", "dtype": "float"},
                    {"name": "Keywords", "dtype": "category"},
                    {"name": "Abstract", "dtype": "text"},
                    {"name": "Category", "dtype": "category"}
                ]
            }, 
            {
                "name": "Journal",
                "source": "data/journal.npz",
                "columns": [
                    {"name": "JournalID", "dtype": "primary_key"},
                    {"name": "Name", "dtype": "text"},
                    {"name": "ImpactFactor", "dtype": "float"},
                    {"name": "Country", "dtype": "category"},
                    {"name": "Publisher", "dtype": "text"},
                    {"name": "PublisherLocation", "dtype": "category"}
                ]
            }
        ]
    }
</schema>
Here we gives the similarity score of each column pair, you can use this information to determine whether two columns may be joinable. The similarity score is scaled to [0, 1], the larger means the more similar.
<similarity>
The pair with the 1st highest similarity is column "Journal" from Table "Paper" and column "Name" from Table "Journal" with similarity 0.885
The pair with the 2nd highest similarity is column "Authors" from Table "Paper" and column "Name" from Table "Journal" with similarity 0.743
The pair with the 3rd highest similarity is column "Authors" from Table "Paper" and column "Country" from Table "Journal" with similarity 0.723
</similarity>
</input>



We need to think about whether we need to do one of the six actions:
1. First, for explode_multi_category_column, the Authors of the paper are in a multi-category column. Moreover, author is closely related to the category of the paper, so the relationship Paper-Author-Paper can be very useful. So, we need to explode this multi category column.
2. For connect_two_columns, the Journal column in the Paper table and the  column Name in the Journal table are highly similar, so we can connect these two columns with a foreign key constraint. Other pairs like Authors and Name, Authors and Country are not similar enough to be connected.
3. For generate_non_dummy_table, the Publisher and PublisherLocation columns are independent columns for the entity Publisher. We can generate a new table Publisher with these two columns.
4. For generate_or_connect_dummy_table, we need to find those categorical columns beneficial for downstream task. We have categorical columns (Journal has been deleted in step 2, Category is the final objective) Keyword, Country, this will result in relationship Paper-Keyword-Paper and Paper-Journal-Country-Journal-Paper respectively. Since the target is to predict the category of a paper, we can generate a dummy table for the column Keyword since paper sharing the same keyword are highly likely to share the same category. Country may be not beneficial since it doesn't present a strong semantic relationship with the category. 
5. For remove_primary_key and add_primary_key, there's no unreasonable primary key or missing primary key in the table, so we don't need to do this action. as a result, we have the following actions
<selection>
        [{{'explanation': "Author is multi-category and Paper-Author-Paper is probably useful. We set the dtype to foreign_key because we want to use the relation", 'action': 'explode_multi_category_column', 'parameters': {'original_table': 'Paper', 'multi_cat_col': 'Author', primary_key_column: 'PaperID', 'new_table_name': 'Author', 'new_col_name': 'AuthorName', 'dtype': 'foreign_key'}},
        {{'explanation': 'the Journal column in the Paper table and the  column Name in the Journal table are highly similar, both of them should refer to the name of the journal', 'action': 'connect_two_columns', 'parameters': {'table_1_name': 'Paper', 'table_1_col_name': 'Journal', 'table_2_name': 'Journal', 'table_2_col_name': 'Name', 'new_table_name': "", 'new_table_col_name': "" }}, 
        {{'explanation': 'Publisher and PublisherLocation are independent columns for the entity Publisher. We can generate a new table Publisher with these two columns', 'action': 'generate_non_dummy_table', 'parameters': {'base_table_name': 'Paper', 'cols': ['Publisher', 'PublisherLocation'],  'new_table_name': 'Publisher'}},
        {{'explanation': 'Keyword is a categorical column which can be used to generate a dummy table. Country is not beneficial for the downstream task', 'action': 'generate_or_connect_dummy_table', 'parameters': {'base_table_name': 'Paper', 'orig_col_name': 'Keyword', 'new_table_name': 'Keyword', 'new_col_name': 'Keyword'}},
        ]
        </selection>

    

        
        History Actions:
        {"explanation": "The 'offer' column in the 'History' table and the 'offer' column in the 'Offer' table are highly similar (similarity score: 0.958). Since the 'offer' column in the 'Offer' table is a primary key, we should connect the 'offer' column in the 'History' table as a foreign key to it.", "action": "connect_two_columns", "parameters": {"table_1_name": "History", "table_1_col_name": "offer", "table_2_name": "Offer", "table_2_col_name": "offer"}}

{"explanation": "The 'id' column in the 'History' table and the 'id' column in the 'Transaction' table have a high similarity score (0.891). Since 'id' in 'History' is a primary key and 'id' in 'Transaction' is categorical, we can connect 'id' in 'Transaction' as a foreign key to 'id' in 'History'.", "action": "connect_two_columns", "parameters": {"table_1_name": "Transaction", "table_1_col_name": "id", "table_2_name": "History", "table_2_col_name": "id"}}

{"explanation": "The 'history_chain' column in 'History' and 'trans_chain' column in 'Transaction' have a high similarity score (0.825). These likely represent related categorical values. A dummy table can be created to represent this relationship.", "action": "generate_or_connect_dummy_table", "parameters": {"base_table_name": "History", "orig_col_name": "history_chain", "new_table_name": "HistoryChain", "new_col_name": "history_chain"}}

{"explanation": "The 'offer_category' column in 'Offer' and the 'trans_category' column in 'Transaction' have a similarity score of 0.770. Since these likely refer to the same type of categorical information, a dummy table should be created to structure this relationship.", "action": "generate_or_connect_dummy_table", "parameters": {"base_table_name": "Offer", "orig_col_name": "offer_category", "new_table_name": "OfferCategory", "new_col_name": "offer_category"}}

{"explanation": "The 'brand' column in 'Offer' and the 'brand' column in 'Transaction' have a similarity score of 0.680. This suggests that they refer to the same entity, and we should create a dummy table to represent brands.", "action": "generate_or_connect_dummy_table", "parameters": {"base_table_name": "Offer", "orig_col_name": "brand", "new_table_name": "Brand", "new_col_name": "brand"}}

{"explanation": "The 'trans_chain' column in Transaction and 'history_chain' column in History have high similarity (0.825), suggesting they refer to the same entity. Since 'history_chain' is already a foreign key to HistoryChain.history_chain, we should connect 'trans_chain' to the same table for consistency.", "action": "connect_two_columns", "parameters": {"table_1_name": "Transaction", "table_1_col_name": "trans_chain", "table_2_name": "History", "table_2_col_name": "history_chain"}}

{"explanation": "The 'trans_category' column in Transaction has high similarity (0.770) with 'offer_category' in Offer. Since 'offer_category' is already connected to OfferCategory.offer_category, we should connect 'trans_category' to the same table for consistency.", "action": "connect_two_columns", "parameters": {"table_1_name": "Transaction", "table_1_col_name": "trans_category", "table_2_name": "Offer", "table_2_col_name": "offer_category"}}

{"explanation": "The 'trans_company' column in Transaction has moderate similarity (0.612) with 'company' in Offer. This suggests they refer to similar entities and would benefit from a shared reference table.", "action": "generate_or_connect_dummy_table", "parameters": {"base_table_name": "Offer", "orig_col_name": "company", "new_table_name": "Company", "new_col_name": "company"}}

{"explanation": "After creating the Company table, we should connect 'trans_company' in Transaction to it for consistency.", "action": "connect_two_columns", "parameters": {"table_1_name": "Transaction", "table_1_col_name": "trans_company", "table_2_name": "Company", "table_2_col_name": "company"}}
        
        <input>
        <dataset_stats>
        Analysis for Table History:
  Column: id
    Max: 4809911000
    Min: 86246
    Mode: 86246
    Sampled Values: [4618160983 4634496807 1285507061  713178623  471882382]
    Number of Total Values: 160057
    Number of Unique Values: 160057
  Column: history_chain
    Max: 526
    Min: 2
    Mode: 21
    Sampled Values: [ 68 206  96  65  64]
    Number of Total Values: 160057
    Number of Unique Values: 130
  Column: offer
    Max: 1208503
    Min: 1194044
    Mode: 1197502
    Sampled Values: [1197502 1208329 1208501 1208251 1208252]
    Number of Total Values: 160057
    Number of Unique Values: 24
  Column: market
    Max: 96
    Min: 1
    Mode: 10
    Sampled Values: [ 4 37 10  2  4]
    Number of Total Values: 160057
    Number of Unique Values: 34
  Column: repeattrips
    Max: 2124
    Min: 0
    Mode: 0
    Sampled Values: [0 0 1 0 0]
    Number of Total Values: 160057
    Number of Unique Values: 56
  Column: repeater
    Mode: f
    Sampled Values: ['f...', 'f...', 'f...', 'f...', 'f...']
    Number of Total Values: 160057
    Number of Unique Values: 2
  Column: offerdate
    Mode: 2013-03-25
    Sampled Values: ['2013-03-14...', '2013-04-23...', '2013-03-23...', '2013-04-15...', '2013-04-03...']
    Number of Total Values: 160057
    Number of Unique Values: 56

Analysis for Table Offer:
  Column: offer
    Max: 1230218
    Min: 1190530
    Mode: 1190530
    Sampled Values: [1219903 1198272 1194044 1199256 1198275]
    Number of Total Values: 37
    Number of Unique Values: 37
  Column: offer_category
    Max: 9909
    Min: 706
    Mode: 5558
    Sampled Values: [7205 3203 5616  799 1703]
    Number of Total Values: 37
    Number of Unique Values: 20
  Column: quantity
    Max: 2
    Min: 1
    Mode: 1
    Sampled Values: [1 1 1 1 1]
    Number of Total Values: 37
    Number of Unique Values: 2
  Column: company
    Max: 1089520383
    Min: 103320030
    Mode: 104460040
    Sampled Values: [104460040 107120272 104610040 104460040 105450050]
    Number of Total Values: 37
    Number of Unique Values: 18
  Column: offervalue
    Max: 5.0
    Min: 0.75
    Mode: 1.5
    Sampled Values: [1.5 1.5 2.  5.  1.5]
    Number of Total Values: 37
    Number of Unique Values: 7
  Column: brand
    Max: 102504
    Min: 875
    Mode: 4294
    Sampled Values: [ 7668 26189 15889  5072  7668]
    Number of Total Values: 37
    Number of Unique Values: 19

Analysis for Table Transaction:
  Column: id
    Max: 4853598737
    Min: 86246
    Mode: 378964359
    Sampled Values: [3296341380 2857948555  497680782  567088292  557557065]
    Number of Total Values: 15349956
    Number of Unique Values: 310665
  Column: trans_chain
    Max: 526
    Min: 2
    Mode: 21
    Sampled Values: [ 95  21  68 360 153]
    Number of Total Values: 15349956
    Number of Unique Values: 134
  Column: dept
    Max: 99
    Min: 7
    Mode: 99
    Sampled Values: [58 21 21 91 21]
    Number of Total Values: 15349956
    Number of Unique Values: 16
  Column: trans_category
    Max: 9909
    Min: 706
    Mode: 9909
    Sampled Values: [7205 5122 5824 2119 9909]
    Number of Total Values: 15349956
    Number of Unique Values: 20
  Column: trans_company
    Max: 10888819686
    Min: 1036030
    Mode: 107143070
    Sampled Values: [104129444 107261373 107618373 107127979 107618373]
    Number of Total Values: 15349956
    Number of Unique Values: 1572
  Column: brand
    Max: 108613
    Min: 5
    Mode: 5072
    Sampled Values: [17286 81691  9798 15163 16756]
    Number of Total Values: 15349956
    Number of Unique Values: 1881
  Column: date
    Mode: 2013-02-02
    Sampled Values: ['2012-12-17...', '2012-04-15...', '2013-02-17...', '2013-06-17...', '2012-08-18...']
    Number of Total Values: 15349956
    Number of Unique Values: 514
  Column: productsize
    Max: 768.0
    Min: 0.05
    Mode: 12.0
    Sampled Values: [38.4 50.   3.5 18.5 16. ]
    Number of Total Values: 15349956
    Number of Unique Values: 590
  Column: productmeasure
    Mode: OZ
    Sampled Values: ['OZ...', 'OZ...', 'OZ...', 'OZ...', 'OZ...']
    Number of Total Values: 15349956
    Number of Unique Values: 3
  Column: purchasequantity
    Max: 970
    Min: -27
    Mode: 1
    Sampled Values: [1 1 1 1 1]
    Number of Total Values: 15349956
    Number of Unique Values: 347
  Column: purchaseamount
    Max: 3153.92
    Min: -885.04
    Mode: 3.99
    Sampled Values: [  2.99   3.   -10.79   9.99   2.  ]
    Number of Total Values: 15349956
    Number of Unique Values: 16372


        </dataset_stats>
        <task>
        This task is to predict whether a user will repeat a purchase given the user's purchase history and user-item structural information
        </task>
        <schema>
        {"dataset_name":"avs","tables":[{"name":"History","source":"data/history.pqt","format":"parquet","columns":[{"name":"id","dtype":"foreign_key","description":"This column is probably representing the ID from 1 to n of users in the system, as it has a lot of unique values.","link_to":"Transaction_History.id"},{"name":"history_chain","dtype":"foreign_key","description":"This column likely represents a categorical value related to the history chain, as it has a limited number of unique values.","link_to":"HistoryChain.history_chain"},{"name":"offer","dtype":"foreign_key","description":"This column represents offers, as it contains a limited number of unique values.","link_to":"Offer.offer"},{"name":"market","dtype":"category","description":"This column likely represents a market category, as it has a limited set of unique values."},{"name":"repeater","dtype":"category","description":"This column likely represents a binary indicator (yes/no) for repeaters."},{"name":"offerdate","dtype":"datetime","description":"This column represents dates of offers, as the values conform to a date format."}],"time_column":null},{"name":"Offer","source":"data/offers.pqt","format":"parquet","columns":[{"name":"offer","dtype":"primary_key","description":"This column represents different offers, as it has a limited number of unique values."},{"name":"offer_category","dtype":"foreign_key","description":"This column represents different offer categories, as it has a limited number of unique values.","link_to":"OfferCategory.offer_category"},{"name":"quantity","dtype":"category","description":"This column represents quantity but has very few unique values, making it categorical."},{"name":"company","dtype":"foreign_key","description":"This column represents companies associated with offers, as it has a limited number of unique values.","link_to":"Company.company"},{"name":"offervalue","dtype":"float","description":"This column represents the value of an offer, as it contains continuous numerical values."},{"name":"brand","dtype":"foreign_key","description":"This column represents brands associated with offers, as it has a limited number of unique values.","link_to":"Brand.brand"}],"time_column":null},{"name":"Transaction","source":"data/transactions.pqt","format":"parquet","columns":[{"name":"id","dtype":"foreign_key","description":"This column is probably representing the ID from 1 to n of users in the system, as it has a lot of unique values.","link_to":"Transaction_History.id"},{"name":"trans_chain","dtype":"foreign_key","description":"This column likely represents a categorical value related to the transaction chain, as it has a limited number of unique values.","link_to":"HistoryChain.history_chain"},{"name":"dept","dtype":"category","description":"This column represents department categories, as it has a limited set of unique values."},{"name":"trans_category","dtype":"foreign_key","description":"This column represents transaction categories, as it has a limited set of unique values.","link_to":"OfferCategory.offer_category"},{"name":"trans_company","dtype":"foreign_key","description":"This column represents companies associated with transactions, as it has a large but limited number of unique values.","link_to":"Company.company"},{"name":"brand","dtype":"category","description":"This column represents brands associated with transactions, as it has a significant but finite number of unique values."},{"name":"date","dtype":"datetime","description":"This column represents transaction dates, as the values conform to a date format."},{"name":"productsize","dtype":"float","description":"This column represents the size of a product in continuous numerical values."},{"name":"productmeasure","dtype":"category","description":"This column represents measurement units for products, as it has a limited set of unique values."},{"name":"purchasequantity","dtype":"float","description":"This column represents the quantity of purchased items and is numerical with a wide range of values."},{"name":"purchaseamount","dtype":"float","description":"This column represents the monetary amount of purchases, as it contains continuous numerical values."}],"time_column":null}],"tasks":[{"name":"repeater","source":"repeater/{split}.pqt","format":"parquet","columns":[{"name":"history_chain","dtype":"foreign_key","link_to":"HistoryChain.history_chain"},{"name":"market","dtype":"category"},{"name":"offerdate","dtype":"datetime"},{"name":"id","dtype":"foreign_key","link_to":"Transaction_History.id"},{"name":"offer","dtype":"foreign_key","link_to":"Offer.offer"},{"name":"repeater","dtype":"category"}],"time_column":null,"evaluation_metric":"auroc","target_column":"repeater","target_table":"History","task_type":"classification","key_prediction_label_column":"label","key_prediction_query_idx_column":"query_idx"}],"method":"r2n","column_groups":null}
        </schema>
        Here we gives the similarity score of each column pair, you can use this information to determine whether two columns may be joinable. The similarity score is scaled to [0, 1], the larger means the more similar.
        <similarity>
        The pair with the 1st highest similarity is column "brand" from Table "Offer" and column "brand" from Table "Transaction" with similarity 0.680
The pair with the 2nd highest similarity is column "trans_chain" from Table "Transaction" and column "trans_company" from Table "Transaction" with similarity 0.591
The pair with the 3rd highest similarity is column "company" from Table "Offer" and column "brand" from Table "Offer" with similarity 0.517
The pair with the 4th highest similarity is column "company" from Table "Offer" and column "brand" from Table "Transaction" with similarity 0.513
The pair with the 5th highest similarity is column "id" from Table "Transaction" and column "brand" from Table "Transaction" with similarity 0.477
The pair with the 6th highest similarity is column "trans_category" from Table "Transaction" and column "trans_company" from Table "Transaction" with similarity 0.464
The pair with the 7th highest similarity is column "trans_chain" from Table "Transaction" and column "brand" from Table "Transaction" with similarity 0.461
The pair with the 8th highest similarity is column "history_chain" from Table "History" and column "brand" from Table "Transaction" with similarity 0.449
The pair with the 9th highest similarity is column "id" from Table "History" and column "brand" from Table "Transaction" with similarity 0.443
The pair with the 10th highest similarity is column "history_chain" from Table "History" and column "trans_company" from Table "Transaction" with similarity 0.440
The pair with the 11st highest similarity is column "trans_company" from Table "Transaction" and column "brand" from Table "Transaction" with similarity 0.440
The pair with the 12nd highest similarity is column "market" from Table "History" and column "trans_chain" from Table "Transaction" with similarity 0.432
The pair with the 13rd highest similarity is column "history_chain" from Table "History" and column "market" from Table "History" with similarity 0.410
The pair with the 14th highest similarity is column "market" from Table "History" and column "brand" from Table "Transaction" with similarity 0.408
The pair with the 15th highest similarity is column "brand" from Table "Offer" and column "trans_company" from Table "Transaction" with similarity 0.400
The pair with the 16th highest similarity is column "offer_category" from Table "Offer" and column "brand" from Table "Offer" with similarity 0.400
The pair with the 17th highest similarity is column "offer" from Table "Offer" and column "id" from Table "Transaction" with similarity 0.389
The pair with the 18th highest similarity is column "offer" from Table "History" and column "company" from Table "Offer" with similarity 0.384
The pair with the 19th highest similarity is column "trans_chain" from Table "Transaction" and column "trans_category" from Table "Transaction" with similarity 0.378
The pair with the 20th highest similarity is column "offer" from Table "Offer" and column "company" from Table "Offer" with similarity 0.371

        </similarity>
        </input>
        Return your output in the json format inside <selection></selection>.
    